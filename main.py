# main.py
import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from app.storage import load_user_data, save_user_data
from bot.telegram_bot import user_states, GOAL_KEYBOARD, handle_message

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
)
logger = logging.getLogger("main")

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É (–∫—Ä–æ–º–µ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –±—ã–ª–æ) –∏ —Å—Ä–∞–∑—É –¥–∞—ë–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å.
    –ï—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    d = load_user_data(user_id)
    name = (d.get("physical_data") or {}).get("name")

    # –º—è–≥–∫–∏–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    d["physical_data"] = {"name": name}
    d["physical_data_completed"] = False
    d["history"] = []
    d["last_program"] = None
    d["last_reply"] = None
    save_user_data(user_id, d)

    # —á–∏—Å—Ç–∏–º runtime-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states.pop(user_id, None)

    if not name:
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–º–µ–Ω–∏
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä GymAiMentor üí™üèº\n"
            "–ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
            "Let's get it started üöÄ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )
        return

    # –ò–º—è —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º —Ü–µ–ª—å (–í–ê–ñ–ù–û: –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –æ—Ç—Å—Ç—É–ø–∞)
    user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {}}
    await update.message.reply_text(
        f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
        reply_markup=GOAL_KEYBOARD,
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –≤ –æ–±—â–∏–π handler ‚Äî –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏/—Å–æ—Å—Ç–æ—è–Ω–∏—è
    await handle_message(update, context)

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error", exc_info=context.error)

def run_main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(on_error)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == "__main__":
    run_main()
