import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from app.storage import load_user_data, save_user_data
from bot.telegram_bot import (
    handle_message,
    user_states,
    GOAL_KEYBOARD,
    MAIN_KEYBOARD,
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s"
)
logger = logging.getLogger("main")

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start:
    - –µ—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Å—Ç–∞–≤–∏–º mode='awaiting_name';
    - –µ—Å–ª–∏ –∏–º—è –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ü–µ–ª–µ–π);
    - –æ–±–Ω—É–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    d = load_user_data(user_id)
    name = (d.get("physical_data") or {}).get("name")

    # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–Ω–∫–µ—Ç—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    d["physical_data"] = {"name": name}
    d["physical_data_completed"] = False
    d["history"] = []
    d["last_program"] = ""          # —Å—Ç—Ä–æ–∫–∞, –Ω–µ None
    d["menu_enabled"] = False       # –ø–∞–Ω–µ–ª—å –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    save_user_data(user_id, d)

    # —Å–±—Ä–æ—Å FSM
    user_states.pop(user_id, None)

    if not name:
        # –ø—Ä–æ—Å–∏–º –∏–º—è
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä GymAiMentorüí™üèº –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )
        return

    # –∏–º—è —É–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É —Ü–µ–ª—å
    await update.message.reply_text(
        f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
        reply_markup=GOAL_KEYBOARD,
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /menu:
    - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã);
    - –∏–Ω–∞—á–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    d = load_user_data(user_id)

    if d.get("menu_enabled"):
        await update.message.reply_text("–ú–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=MAIN_KEYBOARD)
    else:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start."
        )


async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error", exc_info=context.error)


def run_main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))

    # –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) ‚Äî –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.add_error_handler(on_error)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == "__main__":
    run_main()
