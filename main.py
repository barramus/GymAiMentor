import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from app.storage import load_user_data, save_user_data
from app.agent import FitnessAgent
from bot.telegram_bot import handle_message, handle_callback, user_states, GOAL_KEYBOARD

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ name (–µ—Å–ª–∏ —É–∂–µ –±—ã–ª), –æ—Å—Ç–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏ –∏—Å—Ç–æ—Ä–∏—é –æ—á–∏—â–∞–µ–º;
    - –µ—Å–ª–∏ name –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Å—Ç–∞–≤–∏–º mode='awaiting_name';
    - –µ—Å–ª–∏ name –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)

    physical = user_data.get("physical_data") or {}
    name = physical.get("name")

    user_data["physical_data"] = {"name": name}
    user_data["physical_data_completed"] = False
    user_data["history"] = []
    user_data.pop("last_program_text", None)
    user_data.pop("programs", None)
    save_user_data(user_id, user_data)

    user_states.pop(user_id, None)

    if not name:
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä GymAiMentorüí™üèº –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    await update.message.reply_text(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)


async def program_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /program ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç–µ.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)

    if not user_data.get("physical_data_completed"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –Ω–∞–±–µ—Ä–∏ /start.")
        return

    await update.message.reply_text("–û–∫–µ–π, –æ–±–Ω–æ–≤–ª—è—é —Ç–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")
    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)

    try:
        response = await agent.get_response("")  # –∞–≥–µ–Ω—Ç —Å–∞–º –≤–æ–∑—å–º—ë—Ç –∞–Ω–∫–µ—Ç—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    except Exception:
        context.application.logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã (/program)")
        await update.message.reply_text("–ù–µ –≤—ã—à–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    user_data["last_program_text"] = response
    user_data.setdefault("history", []).append(("üßç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã (/program)", "ü§ñ " + response))
    save_user_data(user_id, user_data)

    from bot.telegram_bot import build_program_actions_keyboard
    await update.message.reply_text(response, reply_markup=build_program_actions_keyboard(saved=False))


async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /reset ‚Äî –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏ (–∏–º—è —Å—Ç–∏—Ä–∞–µ–º —Ç–æ–∂–µ).
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    # –ß–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    user_data = {
        "history": [],
        "physical_data": {
            "name": None,
            "gender": None,
            "age": None,
            "height": None,
            "weight": None,
            "goal": None,
            "restrictions": None,
            "schedule": None,
            "level": None,
            "target": None,
        },
        "physical_data_completed": False,
    }
    save_user_data(user_id, user_data)
    user_states.pop(user_id, None)

    await update.message.reply_text("–°–±—Ä–æ—Å–∏–ª –∞–Ω–∫–µ—Ç—É. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ ‚Äî –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}


def run_main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("program", program_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))

    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    run_main()
