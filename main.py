import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from app.storage import load_user_data, save_user_data
from bot.telegram_bot import (
    handle_message,
    on_program_action,
    user_states,
    GOAL_KEYBOARD,
    MAIN_KEYBOARD,
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
)
logger = logging.getLogger("main")

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ name (–µ—Å–ª–∏ —É–∂–µ –±—ã–ª), –æ—Å—Ç–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏ –∏—Å—Ç–æ—Ä–∏—é –æ—á–∏—â–∞–µ–º;
    - –µ—Å–ª–∏ name –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Å—Ç–∞–≤–∏–º mode='awaiting_name';
    - –µ—Å–ª–∏ name –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)

    physical = user_data.get("physical_data") or {}
    name = physical.get("name")

    user_data["physical_data"] = {"name": name}
    user_data["physical_data_completed"] = False
    user_data["history"] = []
    user_data["current_plan"] = ""
    save_user_data(user_id, user_data)

    user_states.pop(user_id, None)

    if not name:
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä GymAiMentorüí™üèº –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    await update.message.reply_text(
        f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
        reply_markup=GOAL_KEYBOARD,
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
    if update.message:
        await update.message.reply_text(
            "–ú–µ–Ω—é –Ω–∏–∂–µ üëá",
            reply_markup=MAIN_KEYBOARD,
        )


async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error", exc_info=context.error)


def run_main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))

    # –ö–æ–ª–±—ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(on_program_action, pattern=r"^program:"))

    # –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Error handler
    app.add_error_handler(on_error)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
    # –û—Ç—Å–µ–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == "__main__":
    run_main()
