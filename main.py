# main.py
import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from app.storage import load_user_data, save_user_data
from bot.telegram_bot import handle_message

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
)
logger = logging.getLogger("main")

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É (–∫—Ä–æ–º–µ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –±—ã–ª–æ) –∏ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –Ω–∞—á–Ω—ë—Ç –æ–ø—Ä–æ—Å.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    d = load_user_data(user_id)
    name = (d.get("physical_data") or {}).get("name")

    d["physical_data"] = {"name": name}
    d["physical_data_completed"] = False
    d["history"] = []
    d["last_program"] = None
    d["last_reply"] = None
    save_user_data(user_id, d)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä GymAiMentor üí™üèº\n"
        "–Ø –º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∞ —Ç–∞–∫ –∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–æ—Ä—Ç–æ–º, –ø–∏—Ç–∞–Ω–∏–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.¬ª."
    )
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –¥–∞–ª—å—à–µ ‚Äî handler —Å–∞–º –Ω–∞—á–Ω—ë—Ç —Å –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
    await handle_message(update, context)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏/—Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await handle_message(update, context)

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled error", exc_info=context.error)

def run_main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))

    # –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) ‚Äî –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–∫–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
    app.add_error_handler(on_error)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)

if __name__ == "__main__":
    run_main()
