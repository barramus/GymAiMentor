import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from app.storage import load_user_data, save_user_data
from bot.telegram_bot import (
    handle_message,
    user_states,
    GOAL_KEYBOARD,
    cmd_program,
    cmd_reset,
    cmd_edit,
    cmd_export,
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
)

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ name (–µ—Å–ª–∏ —É–∂–µ –±—ã–ª), –æ—Å—Ç–∞–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏ –∏—Å—Ç–æ—Ä–∏—é –æ—á–∏—â–∞–µ–º;
    - –µ—Å–ª–∏ name –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Å—Ç–∞–≤–∏–º mode='awaiting_name';
    - –µ—Å–ª–∏ name –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏.
    """
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)

    physical = user_data.get("physical_data") or {}
    name = physical.get("name")

    user_data["physical_data"] = {"name": name}
    user_data["physical_data_completed"] = False
    user_data["history"] = []
    save_user_data(user_id, user_data)

    user_states.pop(user_id, None)

    if not name:
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä GymAiMentor üí™ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    await update.message.reply_text(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º."""
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –∏–º—è)\n"
        "/program ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç–µ\n"
        "/reset ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –∏—Å—Ç–æ—Ä–∏—é\n"
        "/edit age|weight|schedule ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –ø–æ–ª–µ –∞–Ω–∫–µ—Ç—ã\n"
        "/export [md|pdf] ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –≤ —Ñ–∞–π–ª\n"
    )
    await update.message.reply_text(text)


async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ‚Äî –ø–∏—à–µ—Ç –≤ –ª–æ–≥, –Ω–µ –ø–∞–¥–∞–µ–º –º–æ–ª—á–∞."""
    logging.exception("Update %r caused error: %s", update, context.error)


def run_main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("program", cmd_program))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CommandHandler("edit", cmd_edit))
    app.add_handler(CommandHandler("export", cmd_export))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.add_error_handler(on_error)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
    app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    run_main()
