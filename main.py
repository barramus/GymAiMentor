import os
from dotenv import load_dotenv
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from app.storage import load_user_data, save_user_data
from app.agent import FitnessAgent
from bot.telegram_bot import (
    handle_message,
    handle_callback,
    user_states,
    GOAL_KEYBOARD,
    build_program_actions_keyboard,
    _export_md,
    _export_pdf,
)

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)

    physical = user_data.get("physical_data") or {}
    name = physical.get("name")

    user_data["physical_data"] = {"name": name}
    user_data["physical_data_completed"] = False
    user_data["history"] = []
    user_data.pop("last_program_text", None)
    save_user_data(user_id, user_data)

    user_states.pop(user_id, None)

    if not name:
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä GymAiMentorüí™üèº –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    await update.message.reply_text(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)


async def program_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)

    if not user_data.get("physical_data_completed"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –Ω–∞–±–µ—Ä–∏ /start.")
        return

    await update.message.reply_text("–û–∫–µ–π, –æ–±–Ω–æ–≤–ª—è—é —Ç–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")
    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    try:
        response = await agent.get_response("")
    except Exception:
        context.application.logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã (/program)")
        await update.message.reply_text("–ù–µ –≤—ã—à–ª–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    user_data["last_program_text"] = response
    user_data.setdefault("history", []).append(("üßç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã (/program)", "ü§ñ " + response))
    save_user_data(user_id, user_data)

    await update.message.reply_text(response, reply_markup=build_program_actions_keyboard(saved=False))


async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    user_data = {
        "history": [],
        "physical_data": {
            "name": None, "gender": None, "age": None, "height": None, "weight": None,
            "goal": None, "restrictions": None, "schedule": None, "level": None, "target": None,
        },
        "physical_data_completed": False,
    }
    save_user_data(user_id, user_data)
    user_states.pop(user_id, None)

    await update.message.reply_text("–°–±—Ä–æ—Å–∏–ª –∞–Ω–∫–µ—Ç—É. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ ‚Äî –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}


async def save_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /save ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω."""
    if not update.message:
        return
    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)
    text = user_data.get("last_program_text")
    if not text:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /program –∏–ª–∏ /start.")
        return
    programs = user_data.get("programs") or []
    from datetime import datetime
    programs.append({"ts": datetime.now().isoformat(timespec="seconds"), "text": text})
    user_data["programs"] = programs
    save_user_data(user_id, user_data)
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")


async def export_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /export [md|pdf]
    –ü—Ä–∏–º–µ—Ä: /export md   –∏–ª–∏   /export pdf
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é md.
    """
    if not update.message:
        return
    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)
    text = user_data.get("last_program_text")
    if not text:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–ª–∞–Ω (/program).")
        return

    fmt = (context.args[0].lower() if context.args else "md")
    if fmt in ("md", "markdown"):
        path = _export_md(user_id, text)
    elif fmt == "pdf":
        path = _export_pdf(user_id, text)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /export md –∏–ª–∏ /export pdf")
        return

    with open(path, "rb") as f:
        await update.message.reply_document(InputFile(f, filename=path.name))


def run_main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("program", program_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))
    app.add_handler(CommandHandler("save", save_cmd))
    app.add_handler(CommandHandler("export", export_cmd))

    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling).")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    run_main()
