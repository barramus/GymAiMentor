import json
import os
import copy
import time
from pathlib import Path
from typing import Dict, Any, Optional, Tuple


def validate_age(text: str) -> Tuple[bool, Optional[int], str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)."""
    try:
        age = int(text.strip())
        if 10 <= age <= 100:
            return True, age, ""
        return False, None, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 –ª–µ—Ç."
    except (ValueError, AttributeError):
        return False, None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25)."


def validate_height(text: str) -> Tuple[bool, Optional[int], str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –≤ —Å–º."""
    try:
        height = int(text.strip())
        if 100 <= height <= 250:
            return True, height, ""
        return False, None, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º."
    except (ValueError, AttributeError):
        return False, None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)."


def validate_weight(text: str) -> Tuple[bool, Optional[float], str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–µ—Å–∞ –≤ –∫–≥."""
    try:
        weight = float(text.strip().replace(',', '.'))
        if 30 <= weight <= 300:
            return True, round(weight, 1), ""
        return False, None, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥."
    except (ValueError, AttributeError):
        return False, None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70 –∏–ª–∏ 70.5)."


def validate_schedule(text: str) -> Tuple[bool, Optional[int], str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é."""
    try:
        schedule = int(text.strip())
        if 1 <= schedule <= 7:
            return True, schedule, ""
        return False, None, "–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é."
    except (ValueError, AttributeError):
        return False, None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3)."



DEFAULT_USER_DATA: Dict[str, Any] = {
    "history": [],
    "physical_data": {
        "name": None,          # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "gender": None,        # "–º—É–∂—Å–∫–æ–π"/"–∂–µ–Ω—Å–∫–∏–π"
        "age": None,           # —á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º
        "height": None,        # —Å–º
        "weight": None,        # –∫–≥
        "goal": None,          # –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å (–µ—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç)
        "restrictions": None,  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        "level": None,         # "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"/"–æ–ø—ã—Ç–Ω—ã–π"
        "schedule": None,      # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑/–Ω–µ–¥–µ–ª—é
        "target": None,        # "–ø–æ—Ö—É–¥–µ–Ω–∏–µ"/"–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"/"–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
        "preferred_muscle_group": None,  # –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –≥—Ä—É–ø–ø–∞ –º—ã—à—Ü –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
    },
    "lifts": {},               # –Ω–∞ –±—É–¥—É—â–µ–µ (–∏—Å—Ç–æ—Ä–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
    "last_reply": None,        # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç (–ª—é–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
    "last_program": None,      # –ø–æ—Å–ª–µ–¥–Ω—è—è –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê
    "physical_data_completed": False,
    "programs": [],            # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∫–æ–ø–∏—Ç–µ –≤–µ—Ä—Å–∏–∏
}


def _user_path(user_id: str, folder: str) -> Path:
    return Path(folder) / f"{user_id}.json"


def _ensure_structure(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–π –æ–±—ä–µ–∫—Ç –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã.
    –ú—è–≥–∫–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è (schedule/level/target) –∏–∑ –∫–æ—Ä–Ω—è –≤ physical_data.
    –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    """
    result = copy.deepcopy(DEFAULT_USER_DATA)

    if not isinstance(data, dict):
        return result

    # history
    if isinstance(data.get("history"), list):
        result["history"] = data["history"]

    # physical_data
    if isinstance(data.get("physical_data"), dict):
        pd_in = data["physical_data"]
        for k in result["physical_data"].keys():
            if k in pd_in:
                result["physical_data"][k] = pd_in[k]

    # –º–∏–≥—Ä–∞—Ü–∏—è legacy-–ø–æ–ª–µ–π (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ª–µ–∂–∞–ª–∏ –≤ –∫–æ—Ä–Ω–µ)
    for legacy_key in ("schedule", "level", "target"):
        if legacy_key in data and result["physical_data"].get(legacy_key) is None:
            result["physical_data"][legacy_key] = data.get(legacy_key)

    # —Ñ–ª–∞–≥–∏/—Å—Ç—Ä–æ–∫–∏
    if isinstance(data.get("physical_data_completed"), bool):
        result["physical_data_completed"] = data["physical_data_completed"]

    # last_reply, last_program
    if data.get("last_reply") is None or isinstance(data.get("last_reply"), str):
        result["last_reply"] = data.get("last_reply")
    if data.get("last_program") is None or isinstance(data.get("last_program"), str):
        result["last_program"] = data.get("last_program")

    # lifts (–µ—Å–ª–∏ –±—ã–ª)
    if isinstance(data.get("lifts"), dict):
        result["lifts"] = data["lifts"]

    # —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if isinstance(data.get("programs"), list):
        result["programs"] = data["programs"]

    return result



def load_user_data(user_id: str, folder: str = "data/users") -> Dict[str, Any]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º JSON. –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç.
    """
    path = _user_path(user_id, folder)
    if not path.exists():
        return copy.deepcopy(DEFAULT_USER_DATA)

    try:
        with path.open("r", encoding="utf-8") as f:
            raw = json.load(f)
    except (json.JSONDecodeError, OSError):
        return copy.deepcopy(DEFAULT_USER_DATA)

    return _ensure_structure(raw)


def save_user_data(user_id: str, data: Dict[str, Any], folder: str = "data/users") -> None:
    """
    –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: *.tmp ‚Üí os.replace.
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    Path(folder).mkdir(parents=True, exist_ok=True)
    normalized = _ensure_structure(data)

    path = _user_path(user_id, folder)
    tmp_path = path.with_suffix(".json.tmp")

    try:
        with tmp_path.open("w", encoding="utf-8") as f:
            json.dump(normalized, f, ensure_ascii=False, indent=4)
        os.replace(tmp_path, path)
    finally:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ—á–∏—Å—Ç–∏–º tmp, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        if tmp_path.exists():
            try:
                tmp_path.unlink()
            except OSError:
                pass



def get_user_name(user_id: str, folder: str = "data/users") -> Optional[str]:
    d = load_user_data(user_id, folder)
    return (d.get("physical_data") or {}).get("name")


def set_user_name(user_id: str, name: Optional[str], folder: str = "data/users") -> Dict[str, Any]:
    d = load_user_data(user_id, folder)
    if isinstance(name, str):
        name = (name or "").strip()[:80] or None
    d.setdefault("physical_data", {}).update({"name": name})
    save_user_data(user_id, d, folder)
    return d


def set_last_reply(user_id: str, text: Optional[str], folder: str = "data/users") -> Optional[str]:
    d = load_user_data(user_id, folder)
    d["last_reply"] = text
    save_user_data(user_id, d, folder)
    return text


def get_last_reply(user_id: str, folder: str = "data/users") -> Optional[str]:
    d = load_user_data(user_id, folder)
    return d.get("last_reply")


def set_last_program(user_id: str, text: Optional[str], folder: str = "data/users") -> Optional[str]:
    """
    –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ü–†–û–ì–†–ê–ú–ú–£ –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç last_reply,
    —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª¬ª —Ä–∞–±–æ—Ç–∞–ª–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ.
    """
    d = load_user_data(user_id, folder)
    d["last_program"] = text
    save_user_data(user_id, d, folder)
    return text


def get_last_program(user_id: str, folder: str = "data/users") -> Optional[str]:
    d = load_user_data(user_id, folder)
    return d.get("last_program")


def set_user_goal(user_id: str, goal: str, folder: str = "data/users") -> Dict[str, Any]:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏.
    """
    d = load_user_data(user_id, folder)
    old_goal = (d.get("physical_data") or {}).get("target")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
    d.setdefault("physical_data", {}).update({"target": goal})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if old_goal and old_goal != goal:
        hist = d.get("history", [])
        hist.append((
            f"üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å '{old_goal}' –Ω–∞ '{goal}'",
            f"‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞. –ù–æ–≤–∞—è —Ü–µ–ª—å: {goal}"
        ))
        d["history"] = hist
    
    save_user_data(user_id, d, folder)
    return d


def update_user_param(user_id: str, param_name: str, value: Any, folder: str = "data/users") -> Dict[str, Any]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∞–Ω–∫–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    param_name: 'weight', 'schedule', 'restrictions', 'level', 'age', 'height', 'goal'
    """
    d = load_user_data(user_id, folder)
    old_value = (d.get("physical_data") or {}).get(param_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
    d.setdefault("physical_data", {}).update({param_name: value})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    if old_value != value:
        param_labels = {
            'name': 'üë§ –∏–º—è',
            'age': 'üî¢ –≤–æ–∑—Ä–∞—Å—Ç',
            'weight': '‚öñÔ∏è —Ç–µ–∫—É—â–∏–π –≤–µ—Å',
            'goal': 'üéØ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å',
            'schedule': 'üìà —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            'restrictions': '‚ö†Ô∏è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
            'level': 'üèãÔ∏è —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
            'height': 'üìè —Ä–æ—Å—Ç',
            'preferred_muscle_group': 'üí™ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –º—ã—à—Ü—ã'
        }
        label = param_labels.get(param_name, param_name)
        hist = d.get("history", [])
        hist.append((
            f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {label}",
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}" + (f" (–±—ã–ª–æ: {old_value})" if old_value else "")
        ))
        d["history"] = hist
    
    save_user_data(user_id, d, folder)
    return d


def get_user_profile_text(user_id: str, folder: str = "data/users") -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    d = load_user_data(user_id, folder)
    phys = d.get("physical_data") or {}
    
    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ü–µ–ª–µ–π
    goal_icons = {
        "–ø–æ—Ö—É–¥–µ–Ω–∏–µ": "üèÉ‚Äç‚ôÇÔ∏è",
        "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã": "üèãÔ∏è‚Äç‚ôÇÔ∏è",
        "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã": "üßò"
    }
    
    target = phys.get('target') or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
    target_icon = goal_icons.get(target, "üéØ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –º—ã—à–µ—á–Ω—É—é –≥—Ä—É–ø–ø—É
    muscle_group_display = {
        "–Ω–æ–≥–∏": "ü¶µ –ù–æ–≥–∏",
        "—è–≥–æ–¥–∏—Ü—ã": "üçë –Ø–≥–æ–¥–∏—Ü—ã",
        "—Å–ø–∏–Ω–∞": "üîô –°–ø–∏–Ω–∞",
        "–ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏": "üí™ –ü–ª–µ—á–∏ –∏ —Ä—É–∫–∏",
        "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ": "üé≤ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ"
    }
    
    preferred = phys.get('preferred_muscle_group')
    muscle_group_text = muscle_group_display.get(preferred, preferred or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    
    text = f"""üìã **–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:**

üë§ –ò–º—è: {phys.get('name') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
{target_icon} –¶–µ–ª—å: {target}
‚öß –ü–æ–ª: {phys.get('gender') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üî¢ –í–æ–∑—Ä–∞—Å—Ç: {phys.get('age') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} –ª–µ—Ç
üìè –†–æ—Å—Ç: {phys.get('height') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —Å–º
‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: {phys.get('weight') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–≥
üéØ –ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: {phys.get('goal') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–≥
üèãÔ∏è –£—Ä–æ–≤–µ–Ω—å: {phys.get('level') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üìà –ß–∞—Å—Ç–æ—Ç–∞: {phys.get('schedule') or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —Ä–∞–∑/–Ω–µ–¥–µ–ª—é
üí™ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –º—ã—à—Ü—ã: {muscle_group_text}
‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {phys.get('restrictions') or '–Ω–µ—Ç'}"""
    
    return text



def get_lift_history(user_id: str, lift_key: str, folder: str = "data/users"):
    d = load_user_data(user_id, folder)
    return (d.get("lifts") or {}).get(lift_key)


def save_lift_history(
    user_id: str,
    lift_key: str,
    last_weight: float,
    reps: int,
    rir: Optional[int] = None,
    folder: str = "data/users",
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.
    –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ—á—Ç–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π.
    """
    d = load_user_data(user_id, folder)

    entry = {
        "ts": int(time.time()),
        "last_weight": float(last_weight),
        "reps": int(reps),
        "rir": None if rir is None else int(rir),
    }

    lifts = d.setdefault("lifts", {})
    rec = lifts.get(lift_key) or {}

    rec["last_weight"] = entry["last_weight"]
    rec["reps"] = entry["reps"]
    rec["rir"] = entry["rir"]

    hist = rec.get("history") or []
    hist.append(entry)
    rec["history"] = hist[-50:]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ö–≤–æ—Å—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏

    lifts[lift_key] = rec
    d["lifts"] = lifts

    save_user_data(user_id, d, folder)
    return d["lifts"][lift_key]
