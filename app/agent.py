import os
import re
import time
from typing import Optional

from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole
from app.storage import load_user_data, save_user_data

GIGACHAT_MODEL: str = os.getenv("GIGACHAT_MODEL", "GigaChat-2-Max").strip()
GIGACHAT_TEMPERATURE: float = float(os.getenv("GIGACHAT_TEMPERATURE", "0.2"))
GIGACHAT_MAX_TOKENS: int = int(os.getenv("GIGACHAT_MAX_TOKENS", "2000"))
GIGACHAT_TIMEOUT: int = int(os.getenv("GIGACHAT_TIMEOUT", "60"))
GIGACHAT_RETRIES: int = int(os.getenv("GIGACHAT_RETRIES", "3"))

_RPE_CHUNK = re.compile(r'[,;\s]*RPE\s*=?\s*[\d.,\-‚Äì‚Äî]+', re.IGNORECASE)
_RIR_CHUNK = re.compile(r'[,;\s]*RIR\s*=?\s*[\d.,\-‚Äì‚Äî]+', re.IGNORECASE)
_EMPTY_PARENS = re.compile(r'\(\s*\)')
_FIX_COMMAs = re.compile(r'\s*,\s*,')  # –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ

class FitnessAgent:
    def __init__(self, token: str, user_id: str):
        self.token = token
        self.user_id = user_id
        self.user_data = load_user_data(user_id)

        physical_data = self.user_data.get("physical_data", {}) or {}
        self._user_name: Optional[str] = (physical_data.get("name") or "").strip() or None

        physical_prompt = self._format_physical_data(physical_data)

        self.payload = Chat(
            messages=[
                Messages(
                    role=MessagesRole.SYSTEM,
                    content=(
                        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º 8+ –ª–µ—Ç. "
                        "–û–±—â–∞–π—Å—è –Ω–∞ '—Ç—ã'. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ –¥–Ω—è–º: "
                        "–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –ø–æ–¥—Ö–æ–¥—ã√ó–ø–æ–≤—Ç–æ—Ä—ã, –æ—Ç–¥—ã—Ö', "
                        "–∏—Ç–æ–≥–æ–≤–∞—è –∫—Ä–∞—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏. "
                        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã RPE –∏ RIR, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ —à–∫–∞–ª—ã –Ω–∞–≥—Ä—É–∑–∫–∏. "
                        "–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—ã√ó–ø–æ–≤—Ç–æ—Ä—ã, –æ—Ç–¥—ã—Ö, –≤–µ—Å/–≤–∞—Ä–∏–∞—Ü–∏—é/—Ç–µ–º–ø –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
                        "–ù–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ –≤—Ä–æ–¥–µ '–ø—Ä–∏–≤–µ—Ç'."
                    ),
                ),
                Messages(role=MessagesRole.USER, content=physical_prompt),
            ],
            temperature=GIGACHAT_TEMPERATURE,
            max_tokens=GIGACHAT_MAX_TOKENS,
            model=GIGACHAT_MODEL,
        )

    def _format_physical_data(self, data: dict) -> str:
        return (
            f"–¶–µ–ª—å: {data.get('target', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–ü–æ–ª: {data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –ª–µ—Ç\n"
            f"–†–æ—Å—Ç: {data.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
            f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {data.get('weight', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: {data.get('goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {data.get('restrictions', '–Ω–µ—Ç')}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data.get('schedule', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {data.get('level', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )

    def _sanitize_rpe(self, text: str) -> str:
        """–£–±–∏—Ä–∞–µ—Ç RPE/RIR –∏ —á–∏—Å—Ç–∏—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏."""
        t = _RPE_CHUNK.sub("", text)
        t = _RIR_CHUNK.sub("", t)
        t = _EMPTY_PARENS.sub("", t)
        t = _FIX_COMMAs.sub(",", t)
        t = re.sub(r'\s*,\s*\)', ')', t)
        t = re.sub(r'[ \t]{2,}', ' ', t)
        return t.strip()

    def _apply_header(self, text: str) -> str:
        """–ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞—ë–º —à–∞–ø–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –Ω–∞—á–∞–ª–µ."""
        name = self._user_name
        body = (text or "").lstrip()

        low = body.lower()
        for kw in ("–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "—Ö–∞–π"):
            if low.startswith(kw):
                if "\n" in body:
                    body = body.split("\n", 1)[1].lstrip()
                else:
                    body = re.sub(rf'^{kw}\W*', '', body, flags=re.IGNORECASE).lstrip()
                break

        header = (f"{name}, –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏ –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚¨áÔ∏è" if name
                  else "–û–±—Ä–∞–±–æ—Ç–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏ –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚¨áÔ∏è")
        return header + "\n\n" + body

    async def get_response(self, user_input: str) -> str:
        from asyncio import to_thread

        if user_input and user_input.strip():
            self.payload.messages.append(Messages(role=MessagesRole.USER, content=user_input))

        def _chat_sync():
            last_err = None
            for attempt in range(1, GIGACHAT_RETRIES + 1):
                try:
                    try:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                            model=GIGACHAT_MODEL,
                        ) as giga:
                            response = giga.chat(self.payload)
                            return response.choices[0].message
                    except TypeError:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                        ) as giga:
                            response = getattr(giga, "chat")(self.payload, model=GIGACHAT_MODEL)
                            return response.choices[0].message
                except Exception as e:
                    last_err = e
                    if attempt == GIGACHAT_RETRIES:
                        raise
                    time.sleep(2 * attempt)
            raise last_err or RuntimeError("GigaChat call failed")

        message = await to_thread(_chat_sync)
        clean = self._sanitize_rpe(message.content)
        personalized = self._apply_header(clean)

        self.payload.messages.append(Messages(role=MessagesRole.ASSISTANT, content=clean))
        history = self.user_data.get("history", [])
        if user_input and user_input.strip():
            history.append(("üßç " + user_input, "ü§ñ " + personalized))
        else:
            history.append(("üßç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "ü§ñ " + personalized))
        self.user_data["history"] = history
        save_user_data(self.user_id, self.user_data)

        return personalized
