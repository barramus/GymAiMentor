import os
import re
import time
from typing import Optional

from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole
from app.storage import load_user_data, save_user_data

GIGACHAT_MODEL: str = os.getenv("GIGACHAT_MODEL", "GigaChat-2-Max").strip()
GIGACHAT_TEMPERATURE: float = float(os.getenv("GIGACHAT_TEMPERATURE", "0.2"))
GIGACHAT_MAX_TOKENS: int = int(os.getenv("GIGACHAT_MAX_TOKENS", "2000"))
GIGACHAT_TIMEOUT: int = int(os.getenv("GIGACHAT_TIMEOUT", "60"))
GIGACHAT_RETRIES: int = int(os.getenv("GIGACHAT_RETRIES", "3"))

_RPE_PATTERNS = [
    r"\(?\s*RPE\s*=?\s*\d+(?:\s*-\s*\d+)?\s*\)?",
    r"\(?\s*RIR\s*=?\s*\d+(?:\s*-\s*\d+)?\s*\)?",
    r"\b–¥–æ\s+–æ—Ç–∫–∞–∑–∞\b",
    r"\b–ø–æ—á—Ç–∏\s+–¥–æ\s+–æ—Ç–∫–∞–∑–∞\b",
]

def _strip_rpe(text: str) -> str:
    out = text
    for p in _RPE_PATTERNS:
        out = re.sub(p, "", out, flags=re.IGNORECASE)
    # —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ/—Å–∫–æ–±–∫–∏ –ø–æ—Å–ª–µ –≤—ã—Ä–µ–∑–∞–Ω–∏—è
    out = re.sub(r"\s{2,}", " ", out)
    out = re.sub(r"\(\s*\)", "", out)
    out = re.sub(r",\s*,", ", ", out)
    out = re.sub(r"\s+\n", "\n", out)
    return out.strip()

class FitnessAgent:
    def __init__(self, token: str, user_id: str):
        self.token = token
        self.user_id = user_id
        self.user_data = load_user_data(user_id)

        physical_data = self.user_data.get("physical_data", {}) or {}
        self._user_name: Optional[str] = (physical_data.get("name") or "").strip() or None

        physical_prompt = self._format_physical_data(physical_data)

        self.payload = Chat(
            messages=[
                Messages(
                    role=MessagesRole.SYSTEM,
                    content=(
                        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º –∑–∞–ª–µ, —Å –æ–ø—ã—Ç–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞–Ω—è—Ç–∏–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –±–æ–ª–µ–µ 8 –ª–µ—Ç). "
                        "–ü–∏—à–∏ —á—ë—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ: –±–ª–æ–∫–∏ –ø–æ –¥–Ω—è–º, —Å–ø–∏—Å–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. "
                        "–£–∫–∞–∑—ã–≤–∞–π –ø–æ–¥—Ö–æ–¥—ã √ó –ø–æ–≤—Ç–æ—Ä—ã –∏ –æ—Ç–¥—ã—Ö –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. "
                        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã RPE/RIR –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ '–¥–æ –æ—Ç–∫–∞–∑–∞'. "
                        "–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Äî –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞ –ø–æ–Ω—è—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–∏–π (–ª—ë–≥–∫–æ/—É–º–µ—Ä–µ–Ω–Ω–æ/—Ç—è–∂–µ–ª–æ) –±–µ–∑ —à–∫–∞–ª. "
                        "–û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ '—Ç—ã'. "
                        "–°—Ç—Ä–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –±–µ–∑ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã."
                    ),
                ),
                Messages(role=MessagesRole.USER, content=physical_prompt),
            ],
            temperature=GIGACHAT_TEMPERATURE,
            max_tokens=GIGACHAT_MAX_TOKENS,
            model=GIGACHAT_MODEL,
        )

    def _format_physical_data(self, data: dict) -> str:
        return (
            f"–¶–µ–ª—å: {data.get('target', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–ü–æ–ª: {data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –ª–µ—Ç\n"
            f"–†–æ—Å—Ç: {data.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
            f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {data.get('weight', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: {data.get('goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {data.get('restrictions', '–Ω–µ—Ç')}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data.get('schedule', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {data.get('level', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )

    def _with_name_prefix(self, text: str) -> str:
        """–í—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±–µ–∑ '–ø—Ä–∏–≤–µ—Ç'."""
        name = (self._user_name or "").strip()
        prefix = f"{name}, –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚¨áÔ∏è\n\n" if name else ""
        return prefix + text

    async def get_response(self, user_input: str) -> str:
        from asyncio import to_thread

        if user_input and user_input.strip():
            self.payload.messages.append(Messages(role=MessagesRole.USER, content=user_input))

        def _chat_sync():
            last_err = None
            for attempt in range(1, GIGACHAT_RETRIES + 1):
                try:
                    try:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                            model=GIGACHAT_MODEL,
                        ) as giga:
                            response = giga.chat(self.payload)
                            return response.choices[0].message
                    except TypeError:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                        ) as giga:
                            response = getattr(giga, "chat")(self.payload, model=GIGACHAT_MODEL)
                            return response.choices[0].message
                except Exception as e:
                    last_err = e
                    if attempt == GIGACHAT_RETRIES:
                        raise
                    time.sleep(2 * attempt)
            raise last_err or RuntimeError("GigaChat call failed")

        message = await to_thread(_chat_sync)
        self.payload.messages.append(message)

        cleaned = _strip_rpe(message.content)
        personalized = self._with_name_prefix(cleaned)

        history = self.user_data.get("history", [])
        if user_input and user_input.strip():
            history.append(("üßç " + user_input, "ü§ñ " + personalized))
        else:
            history.append(("üßç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "ü§ñ " + personalized))
        self.user_data["history"] = history
        save_user_data(self.user_id, self.user_data)

        return personalized
