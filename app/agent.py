from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole
from app.storage import load_user_data, save_user_data

import os
import time
import re
from typing import Optional

GIGACHAT_MODEL: str = os.getenv("GIGACHAT_MODEL", "GigaChat-2-Max").strip()
GIGACHAT_TEMPERATURE: float = float(os.getenv("GIGACHAT_TEMPERATURE", "0.2"))
GIGACHAT_MAX_TOKENS: int = int(os.getenv("GIGACHAT_MAX_TOKENS", "2000"))
GIGACHAT_TIMEOUT: int = int(os.getenv("GIGACHAT_TIMEOUT", "60"))
GIGACHAT_RETRIES: int = int(os.getenv("GIGACHAT_RETRIES", "3"))

MAX_HISTORY_MESSAGES = 12

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å 8+ –≥–æ–¥–∞–º–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –û–±—â–∞–π—Å—è –Ω–∞ ¬´—Ç—ã¬ª. "
    "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ë–ï–ó —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. "
    "–°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∂–µ –∏ –ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ.\n\n"
    "–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:\n"
    "1) –ó–∞–≥–æ–ª–æ–≤–æ–∫: ¬´–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ N –¥–Ω–µ–π –¥–ª—è <—Ü–µ–ª—å>¬ª.\n"
    "2) –ö—Ä–∞—Ç–∫–∞—è –≤–≤–æ–¥–Ω–∞—è (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è): —É—Ä–æ–≤–µ–Ω—å, –∫–ª—é—á–µ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã.\n"
    "3) –ü–æ –¥–Ω—è–º:\n"
    "   ‚Äî –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è: ¬´–î–µ–Ω—å X ‚Äî <–≥—Ä—É–ø–ø–∞ –º—ã—à—Ü/—Ç–∏–ø>¬ª\n"
    "   ‚Äî –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–∫–∞–∂–¥–æ–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):\n"
    "     ‚Ä¢ <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ>: <–ø–æ–¥—Ö–æ–¥—ã>x<–ø–æ–≤—Ç–æ—Ä—ã> (RPE=<—á–∏—Å–ª–æ>, –æ—Ç–¥—ã—Ö=<—Å–µ–∫>), —Ç–µ—Ö–Ω–∏–∫–∞: <–∫—Ä–∞—Ç–∫–æ>\n"
    "   ‚Äî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è: ¬´–ó–∞–º–∏–Ω–∫–∞: <5‚Äì10 –º–∏–Ω>¬ª\n"
    "4) –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é: –∫–∞–∫ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É (–≤–µ—Å/–ø–æ–≤—Ç–æ—Ä—ã/–ø–æ–¥—Ö–æ–¥—ã).\n"
    "5) –ï—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ ¬´–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã¬ª.\n"
    "6) –ü–∏—Ç–∞–Ω–∏–µ (–æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ): –±–µ–ª–æ–∫/–ö–ë–ñ–£/–≤–æ–¥–∞, 3‚Äì4 –ø—É–Ω–∫—Ç–∞.\n"
    "7) –ë–µ–∑ —Å—Å—ã–ª–æ–∫, –±–µ–∑ —Ç–∞–±–ª–∏—Ü, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ ¬´–í–æ—Ç¬ª, ¬´–ù–∏–∂–µ¬ª –∏ —Ç.–ø.\n"
    "8) –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞: —Ä—É—Å—Å–∫–∏–π.\n"
)


class FitnessAgent:
    def __init__(self, token: str, user_id: str):
        if not token:
            raise RuntimeError("GIGACHAT_TOKEN –ø—É—Å—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å .env / unit-—Ñ–∞–π–ª.")
        self.token = token
        self.user_id = user_id
        self.user_data = load_user_data(user_id)

        physical_data = self.user_data.get("physical_data", {}) or {}
        self._user_name: Optional[str] = (physical_data.get("name") or "").strip() or None

        physical_prompt = self._format_physical_data(physical_data)

        self.payload = Chat(
            messages=[
                Messages(role=MessagesRole.SYSTEM, content=SYSTEM_PROMPT),
                Messages(role=MessagesRole.USER, content=physical_prompt),
            ],
            temperature=GIGACHAT_TEMPERATURE,
            max_tokens=GIGACHAT_MAX_TOKENS,
            model=GIGACHAT_MODEL,
        )

    def _format_physical_data(self, data: dict) -> str:
        days_hint = ""
        sched = str(data.get("schedule", "")).strip().lower()
        if sched.isdigit():
            d = int(sched)
            if 2 <= d <= 6:
                days_hint = f"\n–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ: {d}."
        return (
            f"–¶–µ–ª—å: {data.get('target', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–ü–æ–ª: {data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –ª–µ—Ç\n"
            f"–†–æ—Å—Ç: {data.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
            f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {data.get('weight', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: {data.get('goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {data.get('restrictions', '–Ω–µ—Ç')}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data.get('schedule', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {data.get('level', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
            f"{days_hint}"
        )

    def _with_name_prefix(self, text: str) -> str:
        """–û–±—ã—á–Ω–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–µ –ø–ª–∞–Ω–∞)."""
        name = self._user_name
        if not name:
            return text
        if text and text[0].isupper():
            return f"{name}, {text[0].lower() + text[1:]}"
        return f"{name}, {text}"

    def _strip_greeting(self, text: str) -> str:
        """–°—Ä–µ–∑–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ (–ü—Ä–∏–≤–µ—Ç, –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, Hello...)."""
        if not text:
            return text
        pattern = r'^\s*((–ø—Ä–∏–≤–µ—Ç(—Å—Ç–≤—É—é)?|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π(—Ç–µ)?|–¥–æ–±—Ä—ã–π\s+(–¥–µ–Ω—å|–≤–µ—á–µ—Ä|—É—Ç—Ä–æ)|—Ö–∞–π|–π–æ|hello|hi)[!,.\-\s]*){1,2}'
        return re.sub(pattern, '', text, flags=re.IGNORECASE)

    def _program_header(self, body: str) -> str:
        """–®–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é."""
        name = self._user_name
        prefix = (
            f"{name}, –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏ –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚¨áÔ∏è"
            if name else
            "–û–±—Ä–∞–±–æ—Ç–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏ –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚¨áÔ∏è"
        )
        return f"{prefix}\n\n{body}"

    def _trim_history(self):
        """–û—Å—Ç–∞–≤–ª—è–µ–º SYSTEM + –ø–µ—Ä–≤—É—é USER (–∞–Ω–∫–µ—Ç–∞) + –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY_MESSAGES."""
        msgs = self.payload.messages
        if len(msgs) <= 2:
            return
        head = msgs[:2]
        tail = msgs[2:]
        if len(tail) > MAX_HISTORY_MESSAGES:
            tail = tail[-MAX_HISTORY_MESSAGES:]
        self.payload.messages = head + tail

    async def get_response(self, user_input: str) -> str:
        from asyncio import to_thread

        if user_input and user_input.strip():
            self.payload.messages.append(Messages(role=MessagesRole.USER, content=user_input))

        def _chat_sync():
            """
            –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ GigaChat —Å —Ä–µ—Ç—Ä–∞—è–º–∏.
            –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ SDK: –ø—Ä–æ–±—É–µ–º –∑–∞–¥–∞—Ç—å –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞;
            –µ—Å–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º model –≤ giga.chat(...).
            """
            last_err = None
            for attempt in range(1, GIGACHAT_RETRIES + 1):
                try:
                    try:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                            model=GIGACHAT_MODEL,
                        ) as giga:
                            response = giga.chat(self.payload)
                            return response.choices[0].message
                    except TypeError:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                        ) as giga:
                            response = getattr(giga, "chat")(self.payload, model=GIGACHAT_MODEL)
                            return response.choices[0].message
                except Exception as e:
                    last_err = e
                    time.sleep(2 * attempt)
            raise last_err or RuntimeError("GigaChat call failed")

        message = await to_thread(_chat_sync)

        self.payload.messages.append(message)
        self._trim_history()

        if user_input and user_input.strip():
            personalized = self._with_name_prefix(message.content)
        else:
            clean = self._strip_greeting(message.content)
            personalized = self._program_header(clean)

        history = self.user_data.get("history", [])
        if user_input and user_input.strip():
            history.append(("üßç " + user_input, "ü§ñ " + personalized))
        else:
            history.append(("üßç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "ü§ñ " + personalized))
        self.user_data["history"] = history
        save_user_data(self.user_id, self.user_data)

        return personalized
