from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole
from app.storage import load_user_data, save_user_data

import os
import time
from typing import Optional

GIGACHAT_MODEL: str = os.getenv("GIGACHAT_MODEL", "GigaChat-2-Max").strip()

GIGACHAT_TEMPERATURE: float = float(os.getenv("GIGACHAT_TEMPERATURE", "0.2"))

GIGACHAT_MAX_TOKENS: int = int(os.getenv("GIGACHAT_MAX_TOKENS", "2000"))

GIGACHAT_TIMEOUT: int = int(os.getenv("GIGACHAT_TIMEOUT", "60"))

GIGACHAT_RETRIES: int = int(os.getenv("GIGACHAT_RETRIES", "3"))

class FitnessAgent:
    def __init__(self, token: str, user_id: str):
        self.token = token
        self.user_id = user_id
        self.user_data = load_user_data(user_id)

        physical_data = self.user_data.get("physical_data", {}) or {}
        self._user_name: Optional[str] = (physical_data.get("name") or "").strip() or None

        physical_prompt = self._format_physical_data(physical_data)

        self.payload = Chat(
            messages=[
                Messages(
                    role=MessagesRole.SYSTEM,
                    content=(
                        "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ 8+ –ª–µ—Ç. "
                        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Ç–ª–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏. "
                        "–û–±—â–∞–π—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞ '—Ç—ã'. "
                        "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ "
                        "–Ω–∞ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö. –ë–µ–∑ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. "
                        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª—å, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ç–æ, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é "
                        "—á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª."
                    ),
                ),
                Messages(role=MessagesRole.USER, content=physical_prompt),
            ],
            temperature=GIGACHAT_TEMPERATURE,
            max_tokens=GIGACHAT_MAX_TOKENS,
            model=GIGACHAT_MODEL,
        )

    def _format_physical_data(self, data: dict) -> str:
        return (
            f"–¶–µ–ª—å: {data.get('target', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–ü–æ–ª: {data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –ª–µ—Ç\n"
            f"–†–æ—Å—Ç: {data.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
            f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {data.get('weight', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: {data.get('goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
            f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {data.get('restrictions', '–Ω–µ—Ç')}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data.get('schedule', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {data.get('level', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )

    def _with_name_prefix(self, text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞."""
        name = self._user_name
        if not name:
            return text
        if text and text[0].isupper():
            return f"{name}, {text[0].lower() + text[1:]}"
        return f"{name}, {text}"

    async def get_response(self, user_input: str) -> str:
        from asyncio import to_thread

        if user_input and user_input.strip():
            self.payload.messages.append(Messages(role=MessagesRole.USER, content=user_input))

        def _chat_sync():
            """
            –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ GigaChat c —Ä–µ—Ç—Ä–∞—è–º–∏.
            –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ SDK: –ø—Ä–æ–±—É–µ–º –∑–∞–¥–∞—Ç—å –º–æ–¥–µ–ª—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞;
            –µ—Å–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º model –≤ giga.chat(...).
            """
            last_err = None
            for attempt in range(1, GIGACHAT_RETRIES + 1):
                try:
                    try:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                            model=GIGACHAT_MODEL,
                        ) as giga:
                            response = giga.chat(self.payload)
                            return response.choices[0].message
                    except TypeError:
                        with GigaChat(
                            credentials=self.token,
                            verify_ssl_certs=False,
                            timeout=GIGACHAT_TIMEOUT,
                        ) as giga:
                            response = getattr(giga, "chat")(self.payload, model=GIGACHAT_MODEL)
                            return response.choices[0].message
                except Exception as e:
                    last_err = e
                    if attempt == GIGACHAT_RETRIES:
                        raise
                    time.sleep(2 * attempt)
            raise last_err or RuntimeError("GigaChat call failed")

        message = await to_thread(_chat_sync)

        self.payload.messages.append(message)
        personalized = self._with_name_prefix(message.content)

        history = self.user_data.get("history", [])
        if user_input and user_input.strip():
            history.append(("üßç " + user_input, "ü§ñ " + personalized))
        else:
            history.append(("üßç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "ü§ñ " + personalized))
        self.user_data["history"] = history
        save_user_data(self.user_id, self.user_data)

        return personalized
