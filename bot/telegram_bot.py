import os
import re
import time
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, List

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    Chat,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import (
    load_user_data,
    save_user_data,
)

__version__ = "tg-bot-1.4.0"
logger = logging.getLogger("bot.telegram_bot")

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}
GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup(
    [GENDER_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

LEVEL_CHOICES = ["üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É"],
        ["üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

# -------------------- –°–æ—Å—Ç–æ—è–Ω–∏—è --------------------

user_states: Dict[str, dict] = {}  # { user_id: {mode, step, data} }

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ --------------------

def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    return name[:80] if len(name) > 80 else name

def _strip_html(text: str) -> str:
    # <br>, <p> ‚Üí –ø–µ—Ä–µ–Ω–æ—Å—ã, —É–±—Ä–∞—Ç—å —Ç–µ–≥–∏. –ü–æ—Ç–æ–º –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å
    text = re.sub(r"\s*<br\s*/?>\s*", "\n", text, flags=re.I)
    text = re.sub(r"</?p\s*/?>", "\n", text, flags=re.I)

    # –£–±—Ä–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ #/##/... –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–æ–¥–µ–ª—å
    def _drop_hashes(line: str) -> str:
        if re.match(r"^\s*#{1,6}\s+", line):
            return re.sub(r"^\s*#{1,6}\s+", "", line)
        return line

    text = "\n".join(_drop_hashes(l) for l in text.splitlines())

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r"\n{3,}", "\n\n", text)
    return text.strip()

def _sanitize_for_markdown(text: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ Markdown: —Ç–µ–ª–µ–≥–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º —Å–∏–º–≤–æ–ª–∞–º.
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è ¬´–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞¬ª: –∑–∞–º–µ–Ω–∏—Ç—å ¬´`¬ª –≤–Ω—É—Ç—Ä–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–ø–æ—Å—Ç—Ä–æ—Ñ, —É–±—Ä–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ HTML-–æ—Å—Ç–∞—Ç–∫–∏.
    """
    text = _strip_html(text)
    # —É–¥–∞–ª–∏–º ¬´–≥–æ–ª—ã–µ¬ª < –∏ >
    text = text.replace("<", "‚Äπ").replace(">", "‚Ä∫")
    # –±—ç–∫—Ç–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–∞–∑
    text = text.replace("`", "¬¥")
    return text

async def _safe_send(chat: Chat, text: str, use_markdown: bool = True) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ –ª–∏–º–∏—Ç—É —Ç–µ–ª–µ–≥–∏ (~4096).
    –†–µ–∂–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º, –∑–∞—Ç–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –∑–∞—Ç–µ–º ¬´–∂—ë—Å—Ç–∫–æ¬ª –µ—Å–ª–∏ –Ω–∞–¥–æ.
    """
    if not text:
        return

    max_len = 3800  # –æ—Å—Ç–∞–≤–∏–º –∑–∞–ø–∞—Å –ø–æ–¥ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    chunks: List[str] = []

    def _split_long(s: str) -> List[str]:
        if len(s) <= max_len:
            return [s]
        parts = []
        buf = []
        cur = 0
        for para in s.split("\n\n"):
            if cur + len(para) + 2 <= max_len:
                buf.append(para)
                cur += len(para) + 2
            else:
                # –µ—Å–ª–∏ –∞–±–∑–∞—Ü —Å–∞–º –ø–æ —Å–µ–±–µ –æ–≥—Ä–æ–º–Ω—ã–π ‚Äî —Ä–µ–∂–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                if buf:
                    parts.append("\n\n".join(buf))
                    buf = []
                    cur = 0
                if len(para) <= max_len:
                    parts.append(para)
                else:
                    # –∂—ë—Å—Ç–∫–∞—è –Ω–∞—Ä–µ–∑–∫–∞
                    for i in range(0, len(para), max_len):
                        parts.append(para[i : i + max_len])
        if buf:
            parts.append("\n\n".join(buf))
        return parts

    for piece in _split_long(text):
        if not piece.strip():
            continue
        chunks.append(piece)

    for idx, chunk in enumerate(chunks, 1):
        try:
            await chat.send_message(
                chunk,
                parse_mode=ParseMode.MARKDOWN if use_markdown else None,
                disable_web_page_preview=True,
            )
        except Exception:
            # –ø–æ–≤—Ç–æ—Ä ‚Äî –±–µ–∑ Markdown
            await chat.send_message(chunk, disable_web_page_preview=True)
        # –ª—ë–≥–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥–∞ –Ω–µ ¬´—Å—Ö–ª–æ–ø–Ω—É–ª–∞¬ª –ø–∞—á–∫—É
        if idx < len(chunks):
            time.sleep(0.2)

def _gender_norm(t: str) -> Optional[str]:
    t = (t or "").strip().lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

async def _send_menu(chat: Chat):
    await chat.send_message("–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=MAIN_KEYBOARD)

# -------------------- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è --------------------

async def _save_last_program(update: Update, user_id: str):
    data = load_user_data(user_id)
    text = (data.get("last_program") or "").strip()
    if not text:
        await update.effective_chat.send_message(
            "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–≥—Ä–∞–º–º—É (—á–µ—Ä–µ–∑ /start –∏–ª–∏ ¬´üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª)."
        )
        await _send_menu(update.effective_chat)
        return

    ts = int(time.time())
    fname = f"program_{user_id}_{ts}.txt"
    out_path = Path("data") / "users" / fname
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(text, encoding="utf-8")

    with open(out_path, "rb") as fh:
        await update.effective_chat.send_document(
            fh, filename=fname, caption="–§–∞–π–ª —Å —Ç–≤–æ–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º"
        )
    await _send_menu(update.effective_chat)

async def _generate_and_send_program(update: Update, user_id: str, agent: FitnessAgent, user_input: str = ""):
    chat = update.effective_chat
    thinking = await chat.send_message("–ì–æ—Ç–æ–≤–ª—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ üß†")

    try:
        plan = await agent.get_program(user_input)
        plan = _sanitize_for_markdown(plan)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        await thinking.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ ¬´–ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª, —á—Ç–æ–±—ã ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª¬ª —Ä–∞–±–æ—Ç–∞–ª–æ –≤—Å–µ–≥–¥–∞
    data = load_user_data(user_id)
    data["last_program"] = plan
    save_user_data(user_id, data)

    await thinking.delete()
    await _safe_send(chat, plan, use_markdown=True)
    await _send_menu(chat)

# -------------------- Public handlers --------------------

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    chat = update.effective_chat
    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    data = load_user_data(user_id)
    phys = data.get("physical_data") or {}
    name = phys.get("name")
    completed = bool(data.get("physical_data_completed"))
    state = user_states.get(user_id, {"mode": None, "step": 0, "data": {}})

    # --- –ö–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ù–ï —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã!) ---
    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª":
        await _save_last_program(update, user_id)
        return

    if text == "üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        if not completed:
            await chat.send_message("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥—ë–º –º–∏–Ω–∏-–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—ã–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π.")
            await _send_menu(chat)
            return
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        await _generate_and_send_program(update, user_id, agent, user_input="")
        return

    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        data["physical_data"] = {"name": name}
        data["physical_data_completed"] = False
        save_user_data(user_id, data)
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {}}
        await chat.send_message("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)
        return

    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É":
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        await chat.send_message("–ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–∏ üëá")
        return

    # --- –†–µ–∂–∏–º QA: –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã, —Å —É—á—ë—Ç–æ–º –∞–Ω–∫–µ—Ç—ã ---
    if state.get("mode") == "qa":
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        thinking = await chat.send_message("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        try:
            ans = await agent.get_answer(text)  # –≤–Ω—É—Ç—Ä–∏ –∞–≥–µ–Ω—Ç –ø–æ–¥—Ç—è–Ω–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ans = _sanitize_for_markdown(ans)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ QA")
            await thinking.edit_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return

        await thinking.delete()
        await _safe_send(chat, ans, use_markdown=True)
        return

    # --- –í–µ—Ç–∫–∞ –æ–ø—Ä–æ—Å–∞ ---
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ /start ‚Äî –≤—ã—Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if not completed and state.get("mode") is None:
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {}}
        if name:
            await chat.send_message(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)
        else:
            await chat.send_message("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        return

    if state.get("mode") == "awaiting_name":
        if not text:
            await chat.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return
        name = _normalize_name(text)
        phys["name"] = name
        data["physical_data"] = phys
        save_user_data(user_id, data)
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {}}
        await chat.send_message(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)
        return

    if text in GOAL_MAPPING and state.get("mode") in (None, "awaiting_goal"):
        user_states[user_id] = {"mode": "awaiting_gender", "step": 0, "data": {"target": GOAL_MAPPING[text]}}
        await chat.send_message("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
        return

    if state.get("mode") == "awaiting_gender":
        g = _gender_norm(text)
        if not g:
            await chat.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GENDER_KEYBOARD)
            return
        st = state["data"]; st["gender"] = g
        user_states[user_id] = {"mode": "survey", "step": 1, "data": st}
        await chat.send_message("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
        ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
        ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª?"),
    ]

    if state.get("mode") == "survey":
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        idx = state["step"]
        if idx > 0:
            prev_key = questions[idx - 1][0]
            state["data"][prev_key] = text

        if idx + 1 <= len(questions):
            next_q = questions[idx][1]
            user_states[user_id] = {"mode": "survey", "step": idx + 1, "data": state["data"]}
            await chat.send_message(next_q)
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è
        user_states[user_id] = {"mode": "awaiting_level", "step": 0, "data": state["data"]}
        await chat.send_message(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
        )
        return

    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await chat.send_message(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
            )
            return

        level = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π" if "–ù–∞—á–∏–Ω–∞—é—â–∏–π" in text else "–æ–ø—ã—Ç–Ω—ã–π"
        st = state["data"]; st["level"] = level

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É
        base_phys = data.get("physical_data", {}) or {}
        base_phys.update(st)
        data["physical_data"] = base_phys
        data["physical_data_completed"] = True
        save_user_data(user_id, data)

        await chat.send_message("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        await _generate_and_send_program(update, user_id, agent, user_input="")

        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(user_id, None)
        return

    # --- –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ ¬´—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å¬ª –≤ QA ---
    if completed:
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        thinking = await chat.send_message("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        try:
            ans = await agent.get_answer(text)
            ans = _sanitize_for_markdown(ans)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ QA (fallback)")
            await thinking.edit_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        await thinking.delete()
        await _safe_send(chat, ans, use_markdown=True)
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ø—Ä–æ—Å–∏–º –∏–º—è/—Ü–µ–ª—å
    user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
    await chat.send_message("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

__all__ = ["handle_message", "GOAL_KEYBOARD", "MAIN_KEYBOARD", "user_states"]
