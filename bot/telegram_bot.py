from __future__ import annotations

import os
import re
import time
import logging
from pathlib import Path
from typing import Optional, Dict, List

from telegram import Update, ReplyKeyboardMarkup, Chat
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import load_user_data, save_user_data, set_last_reply, get_last_reply

logger = logging.getLogger("bot.telegram_bot")

# –í –ø–∞–º—è—Ç–∏ –¥–µ—Ä–∂–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
LAST_REPLIES: dict[str, str] = {}
# –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states: Dict[str, dict] = {}

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}

GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup(
    [GENDER_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

LEVEL_CHOICES = ["üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]
LEVEL_KEYBOARD = ReplyKeyboardMarkup(
    [LEVEL_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É"],
        ["üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
    is_persistent=True,
)


def _sanitize_for_tg(text: str) -> str:
    """–£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ HTML/markdown –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ #."""
    out = text or ""
    # —É–±—Ä–∞—Ç—å #/## –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫
    out = re.sub(r"^\s*#{1,6}\s*", "", out, flags=re.MULTILINE)
    # <br>, <p>
    out = re.sub(r"\s*<br\s*/?>\s*", "\n", out, flags=re.IGNORECASE)
    out = re.sub(r"</?p\s*/?>", "\n", out, flags=re.IGNORECASE)
    # —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (>2 –ø–æ–¥—Ä—è–¥ -> 2)
    out = re.sub(r"\n{3,}", "\n\n", out)
    return out.strip()

def _split_for_telegram(text: str, max_len: int = 3500) -> List[str]:
    """–î–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –¥–Ω–µ–π/–∞–±–∑–∞—Ü–µ–≤."""
    if len(text) <= max_len:
        return [text]

    parts: List[str] = []
    remaining = text
    while len(remaining) > max_len:
        # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—É –¥–Ω—è
        cut = remaining.rfind("\n\n–î–µ–Ω—å ", 0, max_len)
        if cut < 0:
            cut = remaining.rfind("\n\n**–î–µ–Ω—å", 0, max_len)
        if cut < 0:
            cut = remaining.rfind("\n\n", 0, max_len)
        if cut < 0:
            cut = max_len
        parts.append(remaining[:cut].strip())
        remaining = remaining[cut:].strip()
    if remaining:
        parts.append(remaining)
    return parts

async def _safe_send(chat: Chat, text: str, use_markdown: bool = True):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∫—É—Å–∫–∏ + fallback –±–µ–∑ Markdown –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    text = text.strip()
    for chunk in _split_for_telegram(text):
        try:
            if use_markdown:
                await chat.send_message(
                    chunk,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True,
                )
            else:
                await chat.send_message(chunk, disable_web_page_preview=True)
        except Exception as e:
            logger.error("Markdown failed, fallback to plain. Err: %s", e)
            await chat.send_message(chunk, disable_web_page_preview=True)

async def _send_main_menu(update: Update):
    await update.effective_chat.send_message(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=MAIN_KEYBOARD,
    )

async def _save_last_to_file(update: Update, user_id: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã/–æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª .txt –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
    text = LAST_REPLIES.get(user_id) or get_last_reply(user_id) or ""
    if not text.strip():
        await update.effective_chat.send_message(
            "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–≥—Ä–∞–º–º—É (–∫–Ω–æ–ø–∫–æ–π ¬´üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª)."
        )
        return
    ts = int(time.time())
    fname = f"program_{user_id}_{ts}.txt"
    out_path = Path("data/users") / fname
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(text, encoding="utf-8")
    with open(out_path, "rb") as fh:
        await update.effective_chat.send_document(
            fh, filename=fname, caption="–§–∞–π–ª —Å —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π"
        )

def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    return name[:80] if len(name) > 80 else name

def _normalize_gender(text: str) -> Optional[str]:
    t = (text or "").lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

def _parse_goal(text: str) -> Optional[str]:
    """–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–ª—å –∏–∑ –∫–Ω–æ–ø–∫–∏/—Ç–µ–∫—Å—Ç–∞."""
    t = (text or "").lower()
    if any(w in t for w in ("–ø–æ—Ö—É–¥", "—Å–±—Ä–æ—Å", "–∂–∏—Ä")):
        return "–ø–æ—Ö—É–¥–µ–Ω–∏–µ"
    if any(w in t for w in ("–Ω–∞–±—Ä–∞", "–º–∞—Å", "–º—ã—à—Ü")):
        return "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"
    if any(w in t for w in ("–ø–æ–¥–¥–µ—Ä–∂", "—Ñ–æ—Ä–º–∞", "—Ç–æ–Ω–∏", "—É–∫—Ä–µ–ø")):
        return "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_user_data(user_id)
    phys = data.get("physical_data") or {}
    name = phys.get("name")
    completed = bool(data.get("physical_data_completed"))
    state = user_states.get(user_id) or {"mode": None, "step": 0, "data": {}}


    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª":
        await _save_last_to_file(update, user_id)
        return

    if text == "üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        try:
            agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
            plan = await agent.get_program("")  # —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–æ –∞–Ω–∫–µ—Ç–µ
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        plan = _sanitize_for_tg(plan)
        LAST_REPLIES[user_id] = plan
        set_last_reply(user_id, plan)
        await _safe_send(update.effective_chat, plan, use_markdown=True)
        await _send_main_menu(update)
        return

    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã, —Å—Ç–∞—Ä—Ç —Å —Ü–µ–ª–∏. –ò–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –±—ã–ª–æ.
        data["physical_data"] = {"name": name}
        data["physical_data_completed"] = False
        save_user_data(user_id, data)
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {}}
        await update.message.reply_text(
            "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    if not completed and state.get("mode") is None:
        if not name:
            user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
            await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            return
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {}}
        await update.message.reply_text(
            f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É":
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        await update.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º/–ø–∏—Ç–∞–Ω–∏—é üëá")
        return

    if state.get("mode") == "qa":
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        answer = await agent.get_answer(text)
        answer = _sanitize_for_tg(answer)
        LAST_REPLIES[user_id] = answer
        set_last_reply(user_id, answer)
        await _safe_send(update.effective_chat, answer, use_markdown=True)
        return

    # –ò–º—è
    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è.")
            return
        phys["name"] = _normalize_name(text)
        data["physical_data"] = phys
        save_user_data(user_id, data)
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {}}
        await update.message.reply_text(
            f"{phys['name']}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    # –¶–µ–ª—å
    if state.get("mode") == "awaiting_goal":
        if text in GOAL_MAPPING:
            # —Ü–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ –∫ –ø–æ–ª—É
            user_states[user_id] = {"mode": "awaiting_gender", "step": 0, "data": {"target": GOAL_MAPPING[text]}}
            await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
            return

        # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º –ø—Ä–æ—Å—å–±—É –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GOAL_KEYBOARD)
        return

    # –ü–æ–ª
    if state.get("mode") == "awaiting_gender":
        g = _normalize_gender(text)
        if not g:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=GENDER_KEYBOARD,
            )
            return
        st = {"mode": "survey", "step": 2, "data": {**state["data"], "gender": g}}
        user_states[user_id] = st
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
        ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
        ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª?"),
    ]

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ä–æ—Å (–≤–æ–∑—Ä–∞—Å—Ç ‚Üí ... ‚Üí —á–∞—Å—Ç–æ—Ç–∞)
    if state.get("mode") == "survey":
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            state["data"][prev_key] = text
        if state["step"] <= len(questions):
            idx = state["step"] - 1
            _, qtext = questions[idx]
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            await update.message.reply_text(qtext)
            return
        # —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        user_states[user_id] = {"mode": "awaiting_level", "step": 0, "data": state["data"]}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=LEVEL_KEYBOARD)
        return

    # –£—Ä–æ–≤–µ–Ω—å
    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=LEVEL_KEYBOARD,
            )
            return
        level = "–æ–ø—ã—Ç–Ω—ã–π" if ("–û–ø—ã—Ç" in text or "üî•" in text) else "–Ω–æ–≤–∏—á–æ–∫"
        finished = {**state["data"], "level": level}
        user_states.pop(user_id, None)

        base = data.get("physical_data") or {}
        base.update(finished)
        data["physical_data"] = base
        data["physical_data_completed"] = True
        save_user_data(user_id, data)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_program("")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        plan = _sanitize_for_tg(plan)
        LAST_REPLIES[user_id] = plan
        set_last_reply(user_id, plan)
        await _safe_send(update.effective_chat, plan, use_markdown=True)
        await _send_main_menu(update)
        return

    if not completed:
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    try:
        plan = await agent.get_program(text)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏)")
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    plan = _sanitize_for_tg(plan)
    LAST_REPLIES[user_id] = plan
    set_last_reply(user_id, plan)
    await _safe_send(update.effective_chat, plan, use_markdown=True)
    await _send_main_menu(update)
