LAST_REPLIES: dict[str, str] = {}

import os
import re
import time
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import (
    load_user_data,
    save_user_data,
    save_lift_history,
)
from app.weights import base_key

__version__ = "tg-bot-1.3.1"
logger = logging.getLogger("bot.telegram_bot")


user_states: Dict[str, dict] = {}

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}
GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup(
    [GENDER_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

LEVEL_CHOICES = ["üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]

START_KEYBOARD = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É"],
        ["üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "üìà –ú–æ—è –¥–∏–Ω–∞–º–∏–∫–∞"],
        ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
    is_persistent=True,
)



async def _send_main_menu(update: Update):
    """–û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —á—Ç–æ–±—ã –ø–∞–Ω–µ–ª—å –±—ã–ª–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π."""
    await update.effective_chat.send_message(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=MAIN_KEYBOARD,
    )


def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    if len(name) > 80:
        name = name[:80]
    return name


def sanitize_for_tg(text: str) -> str:
    """–£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –∏ <br> ‚Üí –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫."""
    text = re.sub(r"\s*<br\s*/?>\s*", "\n", text)
    text = re.sub(r"</?p\s*/?>", "\n", text)
    return text.strip()


def normalize_gender(text: str) -> Optional[str]:
    t = (text or "").strip().lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None


async def _ask_goal_with_name(update: Update, name: str):
    await update.message.reply_text(
        f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
        reply_markup=GOAL_KEYBOARD,
    )


def _program_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üÜï –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="program:new"),
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="program:restart"),
            ],
        ]
    )


async def _send_program(update: Update, user_id: str, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é."""
    await update.effective_chat.send_message(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=_program_menu(),
        disable_web_page_preview=True,
    )
    await _send_main_menu(update)



async def _save_last_to_file(update: Update, user_id: str):
    from app.storage import get_last_reply

    text = LAST_REPLIES.get(user_id) or get_last_reply(user_id) or ""
    if not text.strip():
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å.",
        )
        await _send_main_menu(update)
        return

    ts = int(time.time())
    fname = f"program_{user_id}_{ts}.txt"
    out_path = Path("data") / "users" / fname
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(text, encoding="utf-8")

    with open(out_path, "rb") as fh:
        await update.effective_chat.send_document(
            fh,
            filename=fname,
            caption="–§–∞–π–ª —Å —Ç–≤–æ–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º",
        )
    await _send_main_menu(update)



def _normalize_piece_name(s: str) -> str:
    return re.sub(r"\s+", " ", s.strip().lower())


async def _parse_and_save_log(update: Update, user_id: str, text: str):
    """
    –û–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞–ø–æ–¥–æ–±–∏–µ:
    "–ø—Ä–∏—Å–µ–¥ 50√ó8, –∂–∏–º –ª—ë–∂–∞ 35√ó10, –≤–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ 40√ó12"
    """
    raw = text.replace("x", "√ó").replace("*", "√ó")
    parts = re.split(r"[,\n;]+", raw)
    saved, errors = [], []

    for p in parts:
        p = p.strip()
        if not p:
            continue
        m = re.search(r"(.+?)\s+(\d+(?:[.,]\d+)?)\s*√ó\s*(\d{1,2})", p, flags=re.IGNORECASE)
        if not m:
            errors.append(p)
            continue
        name, wtxt, reps_txt = m.group(1), m.group(2), m.group(3)
        try:
            weight = float(wtxt.replace(",", "."))
            reps = int(reps_txt)
        except Exception:
            errors.append(p)
            continue

        key = base_key(_normalize_piece_name(name)) or ""
        if not key:
            errors.append(p)
            continue

        save_lift_history(user_id, key, weight, reps, rir=None)
        saved.append((name.strip(), weight, reps))

    if saved:
        msg = "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª:\n" + "\n".join(
            [f"‚Ä¢ {n} ‚Äî {int(w) if float(w).is_integer() else round(float(w),1)}√ó{r}" for n, w, r in saved]
        )
        await update.message.reply_text(msg)

    if errors and not saved:
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç –¥–ª—è:\n" + "\n".join([f"‚Ä¢ {e}" for e in errors]) + "\n\n–ü—Ä–∏–º–µ—Ä: –ø—Ä–∏—Å–µ–¥ 50√ó8",
        )
    elif errors:
        await update.message.reply_text(
            "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —á–∞—Å—Ç—å –∑–∞–ø–∏—Å–µ–π:\n" + "\n".join([f"‚Ä¢ {e}" for e in errors]) + "\n–ü—Ä–∏–º–µ—Ä: –∂–∏–º –ª—ë–∂–∞ 35√ó10",
        )

    await _send_main_menu(update)


_NAME_BY_KEY = {
    "squat": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
    "deadlift": "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞",
    "bench": "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞",
    "ohp": "–ñ–∏–º —Å—Ç–æ—è",
    "row": "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ",
    "lat_pulldown": "–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞",
    "leg_curl": "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ",
    "leg_press": "–ñ–∏–º –Ω–æ–≥–∞–º–∏",
}


async def _send_dynamics(update: Update, user_id: str):
    data = load_user_data(user_id)
    lifts = data.get("lifts") or {}
    if not lifts:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ù–∞–∂–º–∏ ¬´üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª –∏ –ø—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
        )
        await _send_main_menu(update)
        return

    lines = ["–¢–≤–æ—è –¥–∏–Ω–∞–º–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏):"]
    for key, rec in lifts.items():
        name = _NAME_BY_KEY.get(key, key)
        last_w = rec.get("last_weight")
        reps = rec.get("reps")
        hist = rec.get("history") or []
        tail = hist[-3:]
        hist_str = ", ".join(
            [
                f"{int(h['last_weight']) if float(h['last_weight']).is_integer() else round(float(h['last_weight']),1)}√ó{h['reps']} ({datetime.utcfromtimestamp(h['ts']).strftime('%d.%m')})"
                for h in tail
            ]
        )
        if last_w and reps:
            lines.append(
                f"‚Ä¢ {name}: –ø–æ—Å–ª–µ–¥–Ω—è—è ‚Äî {int(last_w) if float(last_w).is_integer() else round(float(last_w),1)}√ó{reps}; –∏—Å—Ç–æ—Ä–∏—è: {hist_str}"
            )
        else:
            lines.append(f"‚Ä¢ {name}: –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ñ–æ—Ä–º–∞—Ç.")
    await update.message.reply_text("\n".join(lines))
    await _send_main_menu(update)



async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    user_data = load_user_data(user_id)
    physical_data = user_data.get("physical_data", {}) or {}
    name = physical_data.get("name")
    completed = bool(user_data.get("physical_data_completed"))

    state = user_states.get(user_id, {"mode": None, "step": 0, "data": {}})

    # --- –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É":
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        await update.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º üëá")
        await _send_main_menu(update)
        return

    if text == "üìà –ú–æ—è –¥–∏–Ω–∞–º–∏–∫–∞":
        await _send_dynamics(update, user_id)
        return

    if text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        user_states[user_id] = {"mode": "log", "step": 0, "data": {}}
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–±–æ—á–∏—Ö –ø–æ–¥—Ö–æ–¥–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–≥–¥–µ ¬´50¬ª ‚Äî –≤–µ—Å, ¬´8¬ª ‚Äî –ø–æ–≤—Ç–æ—Ä—ã):\n"
            "`–ø—Ä–∏—Å–µ–¥ 50√ó8, –∂–∏–º –ª—ë–∂–∞ 35√ó10`\n"
            "–ú–æ–∂–Ω–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
            parse_mode=ParseMode.MARKDOWN,
        )
        await _send_main_menu(update)
        return

    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª":
        await _save_last_to_file(update, user_id)
        return

    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data["physical_data"] = {"name": name}
        user_data["physical_data_completed"] = False
        save_user_data(user_id, user_data)
        await update.message.reply_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await _send_main_menu(update)
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        return

    if text == "üìã –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_response("")
        except Exception:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await _send_main_menu(update)
            return
        plan = sanitize_for_tg(plan)
        await _send_program(update, user_id, plan)
        LAST_REPLIES[user_id] = plan
        from app.storage import set_last_reply; set_last_reply(user_id, plan)
        return

    if text in GOAL_MAPPING:
        user_states[user_id] = {"mode": "awaiting_gender", "step": 0, "data": {"target": GOAL_MAPPING[text]}}
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
        return

    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return
        name = _normalize_name(text)
        physical_data["name"] = name
        user_data["physical_data"] = physical_data
        save_user_data(user_id, user_data)
        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        await _ask_goal_with_name(update, name)
        return

    if state.get("mode") == "awaiting_gender":
        g = normalize_gender(text)
        if not g:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GENDER_KEYBOARD)
            return
        state["data"]["gender"] = g
        user_states[user_id] = {"mode": "survey", "step": 2, "data": state["data"]}
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
        ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
        ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª?"),
    ]

    if not completed and state.get("mode") == "survey":
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            state["data"][prev_key] = text
        if state["step"] <= len(questions):
            next_idx = state["step"] - 1
            _next_key, next_text = questions[next_idx]
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            await update.message.reply_text(next_text)
            return

        user_states[user_id] = {"mode": "awaiting_level", "step": 0, "data": state["data"]}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
        )
        return

    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
            )
            return
        level = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π" if "–ù–∞—á–∏–Ω–∞—é—â–∏–π" in text else "–æ–ø—ã—Ç–Ω—ã–π"
        state["data"]["level"] = level

        finished_data = state["data"]
        user_states.pop(user_id, None)

        base_physical = user_data.get("physical_data", {}) or {}
        base_physical.update(finished_data)
        user_data["physical_data"] = base_physical
        user_data["physical_data_completed"] = True
        user_data.setdefault("history", [])
        save_user_data(user_id, user_data)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_response("")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text(
                "–°–µ–π—á–∞—Å –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=START_KEYBOARD,
            )
            await _send_main_menu(update)
            return

        plan = sanitize_for_tg(plan)
        await _send_program(update, user_id, plan)
        LAST_REPLIES[user_id] = plan
        from app.storage import set_last_reply; set_last_reply(user_id, plan)
        return

    if state.get("mode") == "log":
        await _parse_and_save_log(update, user_id, text)
        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        return

    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    reply = await agent.get_response(text)
    user_data.setdefault("history", []).append(("üßç " + text, "ü§ñ " + reply))
    save_user_data(user_id, user_data)

    reply = sanitize_for_tg(reply)
    LAST_REPLIES[user_id] = reply
    from app.storage import set_last_reply; set_last_reply(user_id, reply)

    await update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)
    await _send_main_menu(update)



async def on_program_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return

    user_id = str(q.from_user.id)
    data = q.data or ""
    await q.answer()
    logger.info("PROGRAM ACTION: user=%s data=%s", user_id, data)

    action = data.split(":", 1)[1] if ":" in data else ""

    if action == "new":
        progress_msg = await q.message.reply_text("–§–æ—Ä–º–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –¥—Ä—É–≥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_response("")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ù–û–í–û–ô –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await progress_msg.edit_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        await progress_msg.edit_text("–ì–æ—Ç–æ–≤–æ! –î–µ—Ä–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üÜï")
        plan = sanitize_for_tg(plan)
        await _send_program(update, user_id, plan)
        LAST_REPLIES[user_id] = plan
        from app.storage import set_last_reply; set_last_reply(user_id, plan)
        return

    if action == "restart":
        user_data = load_user_data(user_id)
        name = (user_data.get("physical_data") or {}).get("name")

        user_data["physical_data"] = {"name": name}
        user_data["physical_data_completed"] = False
        save_user_data(user_id, user_data)

        if name:
            await q.message.reply_text(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)
            user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        else:
            await q.message.reply_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await _send_main_menu(update)
        return


__all__ = ["handle_message", "on_program_action", "user_states", "GOAL_KEYBOARD"]
