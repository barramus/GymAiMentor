from __future__ import annotations

import os
import re
import time
import logging
from pathlib import Path
from typing import Optional, Dict, List

from telegram import Update, ReplyKeyboardMarkup, Chat
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import load_user_data, save_user_data, set_last_reply, get_last_reply

logger = logging.getLogger("bot.telegram_bot")

# –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª)
LAST_REPLIES: dict[str, str] = {}
# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–ø—Ä–æ—Å–∞
user_states: Dict[str, dict] = {}

# ========================
#         –ö–õ–ê–í–ò–ê–¢–£–†–´
# ========================

# –¶–µ–ª–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É–∂—Å–∫–∏–µ —ç–º–æ–¥–∑–∏, –Ω–æ –ª–æ–≥–∏–∫–∞ –Ω–∏–∂–µ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç–º–æ–¥–∑–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞
GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup([GENDER_CHOICES], resize_keyboard=True, one_time_keyboard=True)

LEVEL_CHOICES = ["üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]
LEVEL_KEYBOARD = ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É"],
        ["üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

# ========================
#        –í–°–ü–û–ú–û–ì–ê–õ–ö–ò
# ========================

def _sanitize_for_tg(text: str) -> str:
    """–ù–µ–º–Ω–æ–≥–æ —á–∏—Å—Ç–∏–º –∏ —É–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ #, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å Markdown –≤ Telegram."""
    out = text or ""
    # –£–±–µ—Ä—ë–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (#, ##, ...) ‚Äî –ú–∞—Ä–∏–Ω–∞ –ø—Ä–æ—Å–∏–ª–∞ –±–µ–∑ –Ω–∏—Ö
    out = re.sub(r"^\s*#{1,6}\s*", "", out, flags=re.MULTILINE)
    # HTML-—Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫ –≤ \n
    out = re.sub(r"\s*<br\s*/?>\s*", "\n", out, flags=re.IGNORECASE)
    out = re.sub(r"</?p\s*/?>", "\n", out, flags=re.IGNORECASE)
    # –£–±–µ—Ä—ë–º —Ç—Ä–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    out = re.sub(r"\n{3,}", "\n\n", out)
    return out.strip()

def _split_for_telegram(text: str, max_len: int = 3500) -> List[str]:
    """–î–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –î–Ω—è–º, –∑–∞—Ç–µ–º –ø–æ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º, –∏–Ω–∞—á–µ –ø–æ –¥–ª–∏–Ω–µ."""
    if len(text) <= max_len:
        return [text]
    parts: List[str] = []
    remaining = text
    while len(remaining) > max_len:
        cut = remaining.rfind("\n\n–î–µ–Ω—å", 0, max_len)
        if cut < 0:
            cut = remaining.rfind("\n\n", 0, max_len)
        if cut < 0:
            cut = max_len
        parts.append(remaining[:cut].strip())
        remaining = remaining[cut:].strip()
    if remaining:
        parts.append(remaining)
    return parts

async def _safe_send(chat: Chat, text: str, use_markdown: bool = True):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —à–ª—ë–º —Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî –±—å—ë–º –Ω–∞ —á–∞—Å—Ç–∏,
    –µ—Å–ª–∏ Markdown –ª–æ–º–∞–µ—Ç—Å—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º plain.
    """
    text = text.strip()
    for chunk in _split_for_telegram(text, max_len=3500):
        try:
            if use_markdown:
                await chat.send_message(chunk, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
            else:
                await chat.send_message(chunk, disable_web_page_preview=True)
        except Exception as e:
            logger.error("Markdown send failed (%s). Fallback to plain text.", e)
            await chat.send_message(chunk, disable_web_page_preview=True)

async def _send_main_menu(update: Update):
    await update.effective_chat.send_message(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=MAIN_KEYBOARD,
    )

async def _save_last_to_file(update: Update, user_id: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–°–õ–ï–î–ù–Æ–Æ –ø—Ä–æ–≥—Ä–∞–º–º—É/–æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤ —Ñ–∞–π–ª .txt.
    –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """
    text = LAST_REPLIES.get(user_id) or get_last_reply(user_id) or ""
    if not text.strip():
        await update.effective_chat.send_message(
            "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–≥—Ä–∞–º–º—É (–∫–Ω–æ–ø–∫–æ–π ¬´üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª)."
        )
        return
    ts = int(time.time())
    fname = f"program_{user_id}_{ts}.txt"
    out_path = Path("data/users") / fname
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(text, encoding="utf-8")
    with open(out_path, "rb") as fh:
        await update.effective_chat.send_document(
            fh, filename=fname, caption="–§–∞–π–ª —Å —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π"
        )

def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    return name[:80] if len(name) > 80 else name

def _normalize_gender(text: str) -> Optional[str]:
    t = (text or "").lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

def _parse_goal(text: str) -> Optional[str]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ–º —Ü–µ–ª—å –∏–∑ –∫–Ω–æ–ø–∫–∏/—Å–æ–æ–±—â–µ–Ω–∏—è, –ù–ï –∑–∞–≤–∏—Å—è –æ—Ç —ç–º–æ–¥–∑–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ –∏–∑: '–ø–æ—Ö—É–¥–µ–Ω–∏–µ' | '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã' | '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'
    """
    t = (text or "").lower()
    # –£–¥–∞–ª–∏–º –≤—Å—ë –Ω–µ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–æ–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏ —ç–º–æ–¥–∑–∏
    t = re.sub(r"[^\w\s—ë–Å–∞-—è–ê-–Ø]", " ", t)
    if "–ø–æ—Ö—É–¥" in t:
        return "–ø–æ—Ö—É–¥–µ–Ω–∏–µ"
    if "–Ω–∞–±—Ä" in t or "–º–∞—Å" in t:
        return "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"
    if "–ø–æ–¥–¥–µ—Ä–∂" in t or "—Ñ–æ—Ä–º" in t:
        return "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    return None

# ========================
#      –û–°–ù–û–í–ù–û–ô HANDLER
# ========================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_user_data(user_id)
    phys = data.get("physical_data") or {}
    name = phys.get("name")
    completed = bool(data.get("physical_data_completed"))
    state = user_states.get(user_id) or {"mode": None, "step": 0, "data": {}}

    # ---------- –ñ–Å–°–¢–ö–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ Q&A) ----------
    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª":
        await _save_last_to_file(update, user_id)
        return

    if text == "üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        try:
            agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
            plan = await agent.get_program("")  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ –∞–Ω–∫–µ—Ç–µ
            plan = _sanitize_for_tg(plan)
            LAST_REPLIES[user_id] = plan
            set_last_reply(user_id, plan)
            await _safe_send(update.effective_chat, plan, use_markdown=True)
            await _send_main_menu(update)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã (–∏–º—è –æ—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –±—ã–ª–æ) ‚Äî —Å—Ç–∞—Ä—Ç —Å –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        data["physical_data"] = {"name": name}
        data["physical_data_completed"] = False
        save_user_data(user_id, data)
        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        await update.message.reply_text(
            "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    # ---------- –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º/–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å ----------
    if not completed and state.get("mode") is None:
        if not name:
            user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
            await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            return
        await update.message.reply_text(
            f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    # ---------- –í—Ö–æ–¥ –≤ Q&A ----------
    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É":
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        await update.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º/–ø–∏—Ç–∞–Ω–∏—é üëá")
        return

    # ---------- –†–µ–∂–∏–º Q&A ----------
    if state.get("mode") == "qa":
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        answer = await agent.get_answer(text)
        answer = _sanitize_for_tg(answer)
        LAST_REPLIES[user_id] = answer
        set_last_reply(user_id, answer)
        await _safe_send(update.effective_chat, answer, use_markdown=True)
        return

    # ---------- –ê–Ω–∫–µ—Ç–∞ ----------
    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è.")
            return
        phys["name"] = _normalize_name(text)
        data["physical_data"] = phys
        save_user_data(user_id, data)
        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        await update.message.reply_text(
            f"{phys['name']}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    # –¶–µ–ª—å (—Ä–∞–∑–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ–¥–∑–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞)
    goal = _parse_goal(text)
    if goal:
        user_states[user_id] = {"mode": "awaiting_gender", "step": 0, "data": {"target": goal}}
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
        return

    # –ü–æ–ª
    if state.get("mode") == "awaiting_gender":
        g = _normalize_gender(text)
        if not g:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GENDER_KEYBOARD)
            return
        st = {"mode": "survey", "step": 2, "data": {**state.get("data", {}), "gender": g}}
        user_states[user_id] = st
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–Ω–∫–µ—Ç—ã
    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
        ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
        ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª?"),
    ]

    if state.get("mode") == "survey":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            state["data"][prev_key] = text
        # –ó–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        if state["step"] <= len(questions):
            idx = state["step"] - 1
            _, q_text = questions[idx]
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            await update.message.reply_text(q_text)
            return
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è
        user_states[user_id] = {"mode": "awaiting_level", "step": 0, "data": state["data"]}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=LEVEL_KEYBOARD)
        return

    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=LEVEL_KEYBOARD)
            return
        level = "–æ–ø—ã—Ç–Ω—ã–π" if "–û–ø—ã—Ç" in text or "üî•" in text else "–Ω–æ–≤–∏—á–æ–∫"
        finished = {**state.get("data", {}), "level": level}
        user_states.pop(user_id, None)

        base = data.get("physical_data") or {}
        base.update(finished)
        data["physical_data"] = base
        data["physical_data_completed"] = True
        save_user_data(user_id, data)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_program("")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        plan = _sanitize_for_tg(plan)
        LAST_REPLIES[user_id] = plan
        set_last_reply(user_id, plan)
        await _safe_send(update.effective_chat, plan, use_markdown=True)
        await _send_main_menu(update)
        return

    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞ ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º —Å –∏–º–µ–Ω–∏
    if not completed:
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    # ---------- –û—Å—Ç–∞–ª—å–Ω–æ–µ —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ ----------
    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    try:
        plan = await agent.get_program(text)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏)")
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    plan = _sanitize_for_tg(plan)
    LAST_REPLIES[user_id] = plan
    set_last_reply(user_id, plan)
    await _safe_send(update.effective_chat, plan, use_markdown=True)
    await _send_main_menu(update)
