# bot/telegram_bot.py
from __future__ import annotations

import os
import re
import time
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import load_user_data, save_user_data
from app.storage import get_last_reply, set_last_reply  # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞

__version__ = "tg-bot-1.4.0"
logger = logging.getLogger("bot.telegram_bot")

# -------------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è/–∫—ç—à --------------------------

# –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª)
LAST_REPLIES: dict[str, str] = {}

# user_states[user_id] = {"mode": "...", "step": int, "data": dict}
user_states: Dict[str, dict] = {}

# -------------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------------

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}
GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup(
    [GENDER_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

LEVEL_CHOICES = ["üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]

# –ì–ª–∞–≤–Ω–æ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã)
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É"],
        ["üìã –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

# -------------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------------

def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    return name[:80] if len(name) > 80 else name

def sanitize_for_tg(text: str) -> str:
    """–£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –∏ <br> ‚Üí –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É."""
    text = re.sub(r"\s*<br\s*/?>\s*", "\n", text, flags=re.IGNORECASE)
    text = re.sub(r"</?p\s*/?>", "\n", text, flags=re.IGNORECASE)
    return text.strip()

def normalize_gender(text: str) -> Optional[str]:
    t = (text or "").strip().lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

def _split_chunks(text: str, limit: int = 3500) -> list[str]:
    """–†–µ–∂–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ < limit, —Å—Ç–∞—Ä–∞—è—Å—å –ø–æ —Å—Ç—Ä–æ–∫–∞–º/–∞–±–∑–∞—Ü–∞–º."""
    if len(text) <= limit:
        return [text]
    parts: list[str] = []
    buf: list[str] = []
    size = 0
    for line in text.splitlines(keepends=True):
        if size + len(line) > limit:
            parts.append("".join(buf).rstrip())
            buf, size = [line], len(line)
        else:
            buf.append(line)
            size += len(line)
    if buf:
        parts.append("".join(buf).rstrip())
    return parts

async def _safe_send_text(chat, text: str, reply_markup=None, try_markdown: bool = True):
    """
    –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown; –µ—Å–ª–∏ Telegram —Ä—É–≥–Ω—ë—Ç—Å—è ‚Äî Plain text;
    –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤—ã—á–∏—â–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown.
    """
    chunks = _split_chunks(text)
    for chunk in chunks:
        if try_markdown:
            try:
                await chat.send_message(
                    chunk,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True,
                    reply_markup=reply_markup,
                )
                continue
            except BadRequest:
                # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                pass
        try:
            await chat.send_message(
                chunk,
                disable_web_page_preview=True,
                reply_markup=reply_markup,
            )
        except BadRequest:
            cleaned = re.sub(r"[*_`[\]]", "", chunk)
            await chat.send_message(cleaned, reply_markup=reply_markup)

async def _send_main_menu(update: Update, *, completed: bool | None = None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞/–µ—Å—Ç—å –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞.
    completed=None ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    uid = str(update.effective_user.id)
    if completed is None:
        data = load_user_data(uid)
        completed = bool(data.get("physical_data_completed"))
    if completed:
        await update.effective_chat.send_message(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
            reply_markup=MAIN_KEYBOARD,
        )

async def _send_program(update: Update, user_id: str, text: str):
    await _safe_send_text(update.effective_chat, text)
    await _send_main_menu(update, completed=True)

async def _save_last_to_file(update: Update, user_id: str):
    text = LAST_REPLIES.get(user_id) or get_last_reply(user_id) or ""
    if not text.strip():
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å."
        )
        await _send_main_menu(update)  # –ø–æ–∫–∞–∂–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        return

    ts = int(time.time())
    fname = f"program_{user_id}_{ts}.txt"
    out_path = Path("data") / "users" / fname
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(text, encoding="utf-8")

    with open(out_path, "rb") as fh:
        await update.effective_chat.send_document(
            fh,
            filename=fname,
            caption="–§–∞–π–ª —Å —Ç–≤–æ–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ç–≤–µ—Ç–æ–º",
        )
    await _send_main_menu(update)

async def _ask_goal_with_name(update: Update, name: str):
    await update.message.reply_text(
        f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
        reply_markup=GOAL_KEYBOARD,
    )

# -------------------------- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ --------------------------

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    user_data = load_user_data(user_id)
    physical_data = user_data.get("physical_data", {}) or {}
    name = physical_data.get("name")
    completed = bool(user_data.get("physical_data_completed"))

    state = user_states.get(user_id, {"mode": None, "step": 0, "data": {}})

    # –í—Ö–æ–¥ –≤ Q&A
    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É":
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        await update.message.reply_text(
            "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º üëá",
            reply_markup=MAIN_KEYBOARD if completed else None,
        )
        return

    # –†–µ–∂–∏–º Q&A ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    if state.get("mode") == "qa":
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            answer = await agent.get_answer(text)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ Q&A –æ—Ç–≤–µ—Ç–∞")
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        user_data.setdefault("history", []).append(("üßç " + text, "ü§ñ " + answer))
        save_user_data(user_id, user_data)
        await _safe_send_text(update.effective_chat, answer, reply_markup=MAIN_KEYBOARD if completed else None)
        return

    # --- –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã) ---

    if text == "üìã –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_response("")  # –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ ‚Üí –¥—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await _send_main_menu(update)
            return
        plan = sanitize_for_tg(plan)
        await _send_program(update, user_id, plan)
        LAST_REPLIES[user_id] = plan
        set_last_reply(user_id, plan)
        return

    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª":
        await _save_last_to_file(update, user_id)
        return

    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data["physical_data"] = {"name": name}
        user_data["physical_data_completed"] = False
        save_user_data(user_id, user_data)
        await update.message.reply_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        return

    # --- –ê–Ω–∫–µ—Ç–∞ ---
    if text in GOAL_MAPPING:
        user_states[user_id] = {"mode": "awaiting_gender", "step": 0, "data": {"target": GOAL_MAPPING[text]}}
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
        return

    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return
        name = _normalize_name(text)
        physical_data["name"] = name
        user_data["physical_data"] = physical_data
        save_user_data(user_id, user_data)
        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        await _ask_goal_with_name(update, name)
        return

    if state.get("mode") == "awaiting_gender":
        g = normalize_gender(text)
        if not g:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GENDER_KEYBOARD)
            return
        state["data"]["gender"] = g
        user_states[user_id] = {"mode": "survey", "step": 2, "data": state["data"]}
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
        ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
        ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª?"),
    ]

    if not completed and state.get("mode") == "survey":
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            state["data"][prev_key] = text
        if state["step"] <= len(questions):
            next_idx = state["step"] - 1
            _next_key, next_text = questions[next_idx]
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            await update.message.reply_text(next_text)
            return

        # –£—Ä–æ–≤–µ–Ω—å
        user_states[user_id] = {"mode": "awaiting_level", "step": 0, "data": state["data"]}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
        )
        return

    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
            )
            return
        level = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π" if "–ù–∞—á–∏–Ω–∞—é—â–∏–π" in text else "–æ–ø—ã—Ç–Ω—ã–π"
        state["data"]["level"] = level

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É
        finished_data = state["data"]
        user_states.pop(user_id, None)

        base_physical = user_data.get("physical_data", {}) or {}
        base_physical.update(finished_data)
        user_data["physical_data"] = base_physical
        user_data["physical_data_completed"] = True
        user_data.setdefault("history", [])
        save_user_data(user_id, user_data)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_response("")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text(
                "–°–µ–π—á–∞—Å –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."
            )
            return

        plan = sanitize_for_tg(plan)
        await _send_program(update, user_id, plan)
        LAST_REPLIES[user_id] = plan
        set_last_reply(user_id, plan)
        return

    # --- –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ (–ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã) ---
    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    reply = await agent.get_response(text)
    user_data.setdefault("history", []).append(("üßç " + text, "ü§ñ " + reply))
    save_user_data(user_id, user_data)

    reply = sanitize_for_tg(reply)
    LAST_REPLIES[user_id] = reply
    set_last_reply(user_id, reply)

    await _safe_send_text(update.effective_chat, reply, reply_markup=MAIN_KEYBOARD if completed else None)

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py
__all__ = [
    "handle_message",
    "user_states",
    "GOAL_KEYBOARD",
    "MAIN_KEYBOARD",
]
