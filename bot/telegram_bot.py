import os
import io
import logging
from typing import Optional, Dict, Any, Tuple

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import load_user_data, save_user_data

user_states: Dict[str, Dict[str, Any]] = {}

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}
GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup(
    [GENDER_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

LEVEL_CHOICES = ["üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]
LEVEL_KEYBOARD = ReplyKeyboardMarkup(
    [LEVEL_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

START_KEYBOARD = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)

def build_program_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data="program:save"),
            InlineKeyboardButton("‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data="program:discard"),
        ],
        [
            InlineKeyboardButton("üßæ –≠–∫—Å–ø–æ—Ä—Ç PDF", callback_data="program:export:pdf"),
            InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç MD", callback_data="program:export:md"),
        ],
        [
            InlineKeyboardButton("üß≠ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="program:new"),
            InlineKeyboardButton("üÜï –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="program:restart"),
        ],
    ])


def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    if len(name) > 80:
        name = name[:80]
    return name

def normalize_gender(text: str) -> Optional[str]:
    t = (text or "").strip().lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

def _pick_plan_for_export(data: Dict[str, Any]) -> Optional[str]:
    """
    –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–ª–∞–Ω, –∏–Ω–∞—á–µ —á–µ—Ä–Ω–æ–≤–∏–∫.
    """
    plan = (data.get("saved_plan_md") or "").strip()
    if plan:
        return plan
    plan = (data.get("draft_plan_md") or "").strip()
    return plan or None

def _md_bytes(filename: str, content: str) -> Tuple[str, io.BytesIO]:
    bio = io.BytesIO(content.encode("utf-8"))
    bio.name = filename
    bio.seek(0)
    return filename, bio

def _pdf_bytes(filename: str, md_text: str) -> Tuple[str, io.BytesIO]:
    """
    –ü—Ä–æ—Å—Ç–æ–π PDF: –ø–µ—Ä–µ–Ω–æ—Å–∏–º Markdown –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏).
    –ù—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ reportlab.
    """
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from reportlab.lib.units import mm

    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    left = 15 * mm
    top = height - 20 * mm
    y = top
    max_width = width - 2 * left

    c.setFont("Helvetica", 11)

    for raw_line in md_text.splitlines():
        line = raw_line.replace("\t", "    ")
    
        while line:
            chunk = line[:95]
            line = line[95:]
            c.drawString(left, y, chunk)
            y -= 6 * mm
            if y < 20 * mm:
                c.showPage()
                c.setFont("Helvetica", 11)
                y = top

    c.save()
    buffer.seek(0)
    buffer.name = filename
    return filename, buffer

async def _send_program(update: Update, text_md: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω –∫–∞–∫ Markdown –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π.
    """
    await update.message.reply_text(
        text_md,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
        reply_markup=build_program_keyboard(),
    )

questions = [
    ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
    ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
    ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
    ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
    ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
    ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª?"),
]

async def _ask_goal_with_name(update: Update, name: str):
    await update.message.reply_text(
        f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
        reply_markup=GOAL_KEYBOARD
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    user_data = load_user_data(user_id)
    physical_data = user_data.get("physical_data", {}) or {}
    name = physical_data.get("name")
    completed = bool(user_data.get("physical_data_completed"))

    state = user_states.get(user_id, {"mode": None, "step": 0, "data": {}})

    # –í—ã–±–æ—Ä —Ü–µ–ª–∏
    if text in GOAL_MAPPING:
        user_states[user_id] = {
            "mode": "awaiting_gender",
            "step": 0,
            "data": {"target": GOAL_MAPPING[text]},
        }
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
        return

    # –ò–º—è
    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return

        name = _normalize_name(text)
        physical_data["name"] = name
        user_data["physical_data"] = physical_data
        save_user_data(user_id, user_data)

        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        await _ask_goal_with_name(update, name)
        return

    # –ü–æ–ª
    if state.get("mode") == "awaiting_gender":
        g = normalize_gender(text)
        if not g:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GENDER_KEYBOARD)
            return

        state["data"]["gender"] = g
        user_states[user_id] = {
            "mode": "survey",
            "step": 2,
            "data": state["data"],
        }
        await update.message.reply_text(questions[0][1])
        return

    # –û–ø—Ä–æ—Å
    if not completed and state.get("mode") == "survey":
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            state["data"][prev_key] = text

        if state["step"] <= len(questions):
            next_idx = state["step"] - 1
            _next_key, next_text = questions[next_idx]
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            await update.message.reply_text(next_text)
            return

        # –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî —É—Ä–æ–≤–µ–Ω—å
        user_states[user_id] = {
            "mode": "awaiting_level",
            "step": 0,
            "data": state["data"],
        }
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=LEVEL_KEYBOARD)
        return

    # –£—Ä–æ–≤–µ–Ω—å
    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=LEVEL_KEYBOARD)
            return

        level = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π" if "–ù–∞—á–∏–Ω–∞—é—â–∏–π" in text else "–æ–ø—ã—Ç–Ω—ã–π"
        state["data"]["level"] = level

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É
        finished_data = state["data"]
        user_states.pop(user_id, None)

        base_physical = user_data.get("physical_data", {}) or {}
        base_physical.update(finished_data)

        user_data["physical_data"] = base_physical
        user_data["physical_data_completed"] = True
        user_data.setdefault("history", [])
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫/—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–ª–∞–Ω
        user_data["draft_plan_md"] = None
        user_data["saved_plan_md"] = None
        save_user_data(user_id, user_data)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan_md = await agent.get_response("")
        except Exception:
            context.application.logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text(
                "–°–µ–π—á–∞—Å –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=START_KEYBOARD,
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ß–ï–†–ù–û–í–ò–ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        user_data = load_user_data(user_id)
        user_data["draft_plan_md"] = plan_md
        save_user_data(user_id, user_data)

        await _send_program(update, plan_md)
        return

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã ‚Äî –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∞–≥–µ–Ω—Ç–æ–º
    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    reply = await agent.get_response(text)

    user_data.setdefault("history", []).append(("üßç " + text, "ü§ñ " + reply))
    save_user_data(user_id, user_data)

    await update.message.reply_text(
        reply,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )

async def on_program_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return
    q = update.callback_query
    await q.answer()

    user_id = str(update.effective_user.id)
    action = q.data or ""
    context.application.logger.info("program action: user=%s data=%s", user_id, action)

    data = load_user_data(user_id)

    # program:save
    if action == "program:save":
        plan = (data.get("draft_plan_md") or "").strip()
        if not plan:
            await q.edit_message_reply_markup(reply_markup=build_program_keyboard())
            await q.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
            return
        data["saved_plan_md"] = plan
        save_user_data(user_id, data)
        await q.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–æ–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF/MD.")
        return

    # program:discard
    if action == "program:discard":
        data["draft_plan_md"] = None
        data["saved_plan_md"] = None
        save_user_data(user_id, data)
        await q.message.reply_text("–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—á–∏—â–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–æ–π ¬´üß≠ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª.")
        return

    # program:export:pdf / md
    if action.startswith("program:export:"):
        plan = _pick_plan_for_export(data)
        if not plan:
            await q.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.")
            return

        kind = action.split(":")[-1]
        if kind == "md":
            name, bio = _md_bytes("workout_plan.md", plan)
            await q.message.reply_document(InputFile(bio, filename=name))
        else:
            name, bio = _pdf_bytes("workout_plan.pdf", plan)
            await q.message.reply_document(InputFile(bio, filename=name))
        return

    # program:new ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –±–µ–∑ –æ–ø—Ä–æ—Å–∞
    if action == "program:new":
        await q.message.reply_text("–î–µ–ª–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–ª–∞–Ω–∞‚Ä¶")
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            alt_prompt = (
                "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Ç–µ–º–∏ –∂–µ –≤–≤–æ–¥–Ω—ã–º–∏, "
                "–∏–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –æ—Ñ–æ—Ä–º–∏ —Å—Ç—Ä–æ–≥–æ –≤ Markdown: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–Ω–∏ –∂–∏—Ä–Ω—ã–º, "
                "–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å ¬´- ¬ª. –ë–µ–∑ RPE."
            )
            plan = await agent.get_response(alt_prompt)
        except Exception:
            context.application.logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
            await q.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        data = load_user_data(user_id)
        data["draft_plan_md"] = plan
        save_user_data(user_id, data)

        # –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–π –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å—Å—è —Å edit_message)
        await q.message.reply_text(
            plan,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=build_program_keyboard(),
        )
        return

    # program:restart ‚Äî —Å—Ç–µ—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    if action == "program:restart":
        physical = data.get("physical_data") or {}
        name = physical.get("name")
        data["physical_data"] = {"name": name}
        data["physical_data_completed"] = False
        data["history"] = []
        data["draft_plan_md"] = None
        data["saved_plan_md"] = None
        save_user_data(user_id, data)

        user_states[user_id] = {"mode": "awaiting_name" if not name else None, "step": 0, "data": {}}

        if not name:
            await q.message.reply_text("–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        else:
            await q.message.reply_text(f"–û–∫, {name}! –í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)
        return
