# bot/telegram_bot.py

from __future__ import annotations

import os
import re
import time
import logging
from pathlib import Path
from typing import Optional, Dict

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from telegram.constants import ParseMode

from app.agent import FitnessAgent
from app.storage import (
    load_user_data,
    save_user_data,
    set_last_reply,
    get_last_reply,
    set_last_program,
    get_last_program,
)

__version__ = "tg-bot-1.4.0"
logger = logging.getLogger("bot.telegram_bot")

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------

user_states: Dict[str, dict] = {}

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}
GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup([GENDER_CHOICES], resize_keyboard=True, one_time_keyboard=True)

LEVEL_CHOICES = ["üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]
LEVEL_KEYBOARD = ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True)

# –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É"],
        ["üìã –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª"],
        ["üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

START_KEYBOARD = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------

def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    return name[:80] if len(name) > 80 else name

def _sanitize_incoming(text: str) -> str:
    return (text or "").strip()

def sanitize_for_tg(text: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º HTML –∫ –ø–µ—Ä–µ–Ω–æ—Å–∞–º, —á–∏—Å—Ç–∏–º –ª–∏—à–Ω–µ–µ. Markdown –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å."""
    t = text or ""
    t = re.sub(r"\s*<br\s*/?>\s*", "\n", t, flags=re.IGNORECASE)
    t = re.sub(r"</?p\s*/?>", "\n", t, flags=re.IGNORECASE)
    t = re.sub(r"\n{3,}", "\n\n", t)
    t = t.strip()
    return t

async def _safe_send(chat, text: str, use_markdown: bool = True):
    """–®–ª—ë–º Markdown, –∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ Telegram ‚Äî plain text."""
    if not text:
        return
    try:
        if use_markdown:
            await chat.send_message(text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
        else:
            await chat.send_message(text, disable_web_page_preview=True)
    except BadRequest:
        await chat.send_message(text, disable_web_page_preview=True)

async def _send_main_menu_if_enabled(update: Update, enabled: bool):
    if not enabled:
        return
    await update.effective_chat.send_message("–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=MAIN_KEYBOARD)

def _menu_enabled(user_data: dict) -> bool:
    return bool(user_data.get("menu_enabled"))

def _enable_menu(user_data: dict, value: bool = True):
    user_data["menu_enabled"] = bool(value)

def _normalize_gender(text: str) -> Optional[str]:
    t = (text or "").strip().lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

async def _ask_goal_with_name(update: Update, name: str):
    await update.message.reply_text(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è", reply_markup=GOAL_KEYBOARD)

# ---------- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = _sanitize_incoming(update.message.text)

    user_data = load_user_data(user_id)
    physical_data = user_data.get("physical_data", {}) or {}
    name = physical_data.get("name")
    completed = bool(user_data.get("physical_data_completed"))
    state = user_states.get(user_id, {"mode": None, "step": 0, "data": {}})

    # ====== –ö–ù–û–ü–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ (–Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –≤–æ–ø—Ä–æ—Å—ã) ======

    # 1) –í—Ö–æ–¥ –≤ Q&A-—Ä–µ–∂–∏–º
    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É":
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        await update.message.reply_text("–ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º/–Ω–∞–≥—Ä—É–∑–∫–∞–º/–ø–∏—Ç–∞–Ω–∏—é üëá", reply_markup=MAIN_KEYBOARD)
        return

    # –ï—Å–ª–∏ —É–∂–µ –≤ Q&A ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if state.get("mode") == "qa" and text not in {"üìã –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"}:
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        thinking = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶")
        try:
            answer = await agent.get_answer(text)
        finally:
            try:
                await thinking.delete()
            except Exception:
                pass
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        user_data.setdefault("history", []).append(("üßç " + text, "ü§ñ " + answer))
        save_user_data(user_id, user_data)
        await _safe_send(update.effective_chat, answer, use_markdown=True)
        return

    # 2) –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ –∞–Ω–∫–µ—Ç–µ
    if text == "üìã –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        if not completed:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–ª—É—á–∏ –ø–µ—Ä–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ /start.")
            return
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        thinking = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        try:
            plan = await agent.get_response("")
            plan = sanitize_for_tg(plan)
        finally:
            try:
                await thinking.delete()
            except Exception:
                pass
        set_last_reply(user_id, plan)          # –ø–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–¥–∞—á–∞
        set_last_program(user_id, plan)        # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª)
        await _safe_send(update.effective_chat, plan, use_markdown=True)
        await _send_main_menu_if_enabled(update, _menu_enabled(user_data))
        return

    # 3) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª":
        plan = get_last_program(user_id) or ""
        if not plan.strip():
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–≥—Ä–∞–º–º—É (—á–µ—Ä–µ–∑ /start –∏–ª–∏ ¬´üìã –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª).")
            return
        ts = int(time.time())
        fname = f"program_{user_id}_{ts}.txt"
        out_path = Path("data") / "users" / fname
        out_path.parent.mkdir(parents=True, exist_ok=True)
        out_path.write_text(plan, encoding="utf-8")
        with open(out_path, "rb") as fh:
            await update.effective_chat.send_document(fh, filename=fname, caption="–§–∞–π–ª —Å —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
        return

    # 4) –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã
    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data["physical_data"] = {"name": name}
        user_data["physical_data_completed"] = False
        user_data["last_program"] = ""
        _enable_menu(user_data, False)  # –ø–∞–Ω–µ–ª—å —Å–ø—Ä—è—Ç–∞–Ω–∞ –¥–æ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        save_user_data(user_id, user_data)
        await update.message.reply_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        return

    # ====== –®–ê–ì–ò –ê–ù–ö–ï–¢–´ ======

    # –í—ã–±–æ—Ä —Ü–µ–ª–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text in GOAL_MAPPING:
        user_states[user_id] = {"mode": "awaiting_gender", "step": 0, "data": {"target": GOAL_MAPPING[text]}}
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
        return

    # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return
        name = _normalize_name(text)
        physical_data["name"] = name
        user_data["physical_data"] = physical_data
        save_user_data(user_id, user_data)
        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        await _ask_goal_with_name(update, name)
        return

    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–∞
    if state.get("mode") == "awaiting_gender":
        g = _normalize_gender(text)
        if not g:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GENDER_KEYBOARD)
            return
        state["data"]["gender"] = g
        user_states[user_id] = {"mode": "survey", "step": 2, "data": state["data"]}
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    # –í–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
        ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
        ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª?"),
    ]

    if not completed and state.get("mode") == "survey":
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            state["data"][prev_key] = text
        if state["step"] <= len(questions):
            next_idx = state["step"] - 1
            _next_key, next_text = questions[next_idx]
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            await update.message.reply_text(next_text)
            return

        user_states[user_id] = {"mode": "awaiting_level", "step": 0, "data": state["data"]}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
        )
        return

    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup([LEVEL_CHOICES], resize_keyboard=True, one_time_keyboard=True),
            )
            return
        level = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π" if "–ù–∞—á–∏–Ω–∞—é—â–∏–π" in text else "–æ–ø—ã—Ç–Ω—ã–π"
        state["data"]["level"] = level

        finished_data = state["data"]
        user_states.pop(user_id, None)

        base_physical = user_data.get("physical_data", {}) or {}
        base_physical.update(finished_data)
        user_data["physical_data"] = base_physical
        user_data["physical_data_completed"] = True
        save_user_data(user_id, user_data)

        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        thinking = await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")
        try:
            plan = await agent.get_response("")
            plan = sanitize_for_tg(plan)
        finally:
            try:
                await thinking.delete()
            except Exception:
                pass

        set_last_reply(user_id, plan)
        set_last_program(user_id, plan)
        _enable_menu(user_data, True)  # —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –ø–∞–Ω–µ–ª—å
        save_user_data(user_id, user_data)

        await _safe_send(update.effective_chat, plan, use_markdown=True)
        await _send_main_menu_if_enabled(update, True)
        return

    # ====== –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å ‚Äî —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –í–ù–ï —Ä–µ–∂–∏–º–æ–≤ ======
    # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if not completed:
        await update.message.reply_text("–î–∞–≤–∞–π –∑–∞–≤–µ—Ä—à–∏–º –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.")
        return

    # –ï—Å–ª–∏ –º–µ–Ω—é –≤–∫–ª—é—á–µ–Ω–æ –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–∫ Q&A —Å —É—á—ë—Ç–æ–º –∞–Ω–∫–µ—Ç—ã
    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    thinking = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º‚Ä¶")
    try:
        answer = await agent.get_answer(text)
    finally:
        try:
            await thinking.delete()
        except Exception:
            pass
    await _safe_send(update.effective_chat, answer, use_markdown=True)


__all__ = ["handle_message", "user_states", "GOAL_KEYBOARD", "MAIN_KEYBOARD"]
