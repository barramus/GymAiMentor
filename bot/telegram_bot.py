import os
import re
from typing import Optional, Tuple, List

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import load_user_data, save_user_data

user_states: dict[str, dict] = {}

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}
GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup(
    [GENDER_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

LEVEL_CHOICES = ["üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]
LEVEL_KEYBOARD = ReplyKeyboardMarkup(
    [LEVEL_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

START_KEYBOARD = ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)

questions = [
    ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
    ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
    ("weight", "–¢–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
    ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
    ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
    ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª?"),
]

def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    if len(name) > 80:
        name = name[:80]
    return name

def normalize_gender(text: str) -> Optional[str]:
    t = (text or "").strip().lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

async def _ask_goal_with_name(update: Update, name: str):
    await update.message.reply_text(f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=GOAL_KEYBOARD)

def _to_int_clean(text: str) -> Optional[int]:
    if not text:
        return None
    t = text.replace(",", ".")
    m = re.search(r"\d+([.]\d+)?", t)
    if not m:
        return None
    try:
        return int(round(float(m.group(0))))
    except:
        return None

def _validate_numeric(field: str, value_text: str) -> Tuple[bool, Optional[int], Optional[str]]:
    """
    age: 10..100; height: 120..230; weight|goal: 35..300; schedule: 1..7
    """
    v = _to_int_clean(value_text)
    if v is None:
        return False, None, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 28"
    ranges = {
        "age": (10, 100),
        "height": (120, 230),
        "weight": (35, 300),
        "goal": (35, 300),
        "schedule": (1, 7),
    }
    lo, hi = ranges.get(field, (None, None))
    if lo is None:
        return True, v, None
    if not (lo <= v <= hi):
        return False, None, f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {lo}..{hi}."
    return True, v, None

def _export_plan_files(user_id: str, plan_text: str, what: Optional[str] = None) -> List[str]:
    """
    what: None -> md –∏ pdf (–µ—Å–ª–∏ –µ—Å—Ç—å reportlab), 'md' -> —Ç–æ–ª—å–∫–æ md, 'pdf' -> —Ç–æ–ª—å–∫–æ pdf
    """
    from datetime import datetime
    stamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_uid = re.sub(r"\D+", "", user_id) or "user"
    out: List[str] = []

    # MD
    if what in (None, "md"):
        md_path = f"/tmp/plan_{safe_uid}_{stamp}.md"
        with open(md_path, "w", encoding="utf-8") as f:
            f.write(plan_text)
        out.append(md_path)

    # PDF
    if what in (None, "pdf"):
        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.pdfgen import canvas
            from reportlab.lib.units import cm
            from textwrap import wrap

            pdf_path = f"/tmp/plan_{safe_uid}_{stamp}.pdf"
            c = canvas.Canvas(pdf_path, pagesize=A4)
            width, height = A4
            x = 2 * cm
            y = height - 2 * cm
            max_width = int((width - 2 * x) / 6.2)
            for line in plan_text.splitlines():
                if not line:
                    y -= 14
                    if y < 2 * cm:
                        c.showPage(); y = height - 2 * cm
                    continue
                for chunk in wrap(line, max_width):
                    c.drawString(x, y, chunk)
                    y -= 14
                    if y < 2 * cm:
                        c.showPage(); y = height - 2 * cm
            c.save()
            out.append(pdf_path)
        except Exception:
            pass

    return out

def _get_last_plan_from_history(user_data: dict) -> Optional[str]:
    hist = user_data.get("history") or []
    for u, a in reversed(hist):
        if a and isinstance(a, str):
            return a[2:].strip() if a.startswith("ü§ñ ") else a.strip()
    return None

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def cmd_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)
    if not user_data.get("physical_data_completed"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É: –Ω–∞–∂–º–∏ /start", reply_markup=START_KEYBOARD)
        return

    await update.message.reply_text("–û–∫–µ–π, —Ñ–æ—Ä–º–∏—Ä—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")
    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    try:
        response = await agent.get_response("")
    except Exception:
        context.application.logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã (/program)")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    await update.message.reply_text(response)

async def cmd_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)
    user_data["physical_data"] = {}
    user_data["physical_data_completed"] = False
    user_data["history"] = []
    save_user_data(user_id, user_data)
    user_states.pop(user_id, None)
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=START_KEYBOARD)

async def cmd_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /edit age|weight|schedule
    """
    user_id = str(update.effective_user.id)
    args = (update.message.text or "").split()
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit age|weight|schedule")
        return
    field = args[1].strip().lower()
    if field not in {"age", "weight", "schedule"}:
        await update.message.reply_text("–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: age, weight, schedule")
        return

    user_states[user_id] = {"mode": "editing_field", "field": field}
    prompts = {
        "age": "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):",
        "weight": "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–µ—Å (–∫–≥):",
        "schedule": "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è? (1..7):",
    }
    await update.message.reply_text(prompts[field])

async def cmd_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /export [md|pdf]
    """
    user_id = str(update.effective_user.id)
    user_data = load_user_data(user_id)
    plan = _get_last_plan_from_history(user_data)
    if not plan:
        await update.message.reply_text("–ü–ª–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /program.")
        return

    args = (update.message.text or "").split()
    fmt = None
    if len(args) > 1:
        fmt = args[1].lower()
        if fmt not in {"md", "pdf"}:
            await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: md, pdf. –ü—Ä–∏–º–µ—Ä: /export pdf")
            return

    paths = _export_plan_files(user_id, plan, fmt)
    if not paths:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∞–π–ª(—ã) –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    for p in paths:
        try:
            with open(p, "rb") as f:
                await update.message.reply_document(document=InputFile(f, filename=os.path.basename(p)))
        except Exception:
            context.application.logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    user_data = load_user_data(user_id)
    physical_data = user_data.get("physical_data", {}) or {}
    name = physical_data.get("name")
    completed = bool(user_data.get("physical_data_completed"))

    state = user_states.get(user_id, {"mode": None, "step": 0, "data": {}})

    if state.get("mode") == "editing_field":
        field = state.get("field")
        ok, val, err = _validate_numeric(field, text)
        if not ok:
            await update.message.reply_text(f"{err} –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return

        physical_data[field] = val
        user_data["physical_data"] = physical_data
        save_user_data(user_id, user_data)

        user_states.pop(user_id, None)
        await update.message.reply_text(f"–ü–æ–ª–µ `{field}` –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {val}. –•–æ—á–µ—à—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω? –ò—Å–ø–æ–ª—å–∑—É–π /program")
        return

    if text in GOAL_MAPPING:
        user_states[user_id] = {
            "mode": "awaiting_gender",
            "step": 0,
            "data": {"target": GOAL_MAPPING[text]},
        }
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
        return

    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return

        name = _normalize_name(text)
        physical_data["name"] = name
        user_data["physical_data"] = physical_data
        save_user_data(user_id, user_data)

        user_states[user_id] = {"mode": None, "step": 0, "data": {}}
        await _ask_goal_with_name(update, name)
        return

    if state.get("mode") == "awaiting_gender":
        g = normalize_gender(text)
        if not g:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GENDER_KEYBOARD)
            return

        state["data"]["gender"] = g
        user_states[user_id] = {
            "mode": "survey",
            "step": 2,
            "data": state["data"],
        }
        await update.message.reply_text(questions[0][1])
        return

    if not completed and state.get("mode") == "survey":
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            if prev_key in {"age", "height", "weight", "goal", "schedule"}:
                ok, val, err = _validate_numeric(prev_key, text)
                if not ok:
                    await update.message.reply_text(f"{err} –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
                    return
                state["data"][prev_key] = val
            else:
                state["data"][prev_key] = text

        if state["step"] <= len(questions):
            next_idx = state["step"] - 1
            _next_key, next_text = questions[next_idx]
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            await update.message.reply_text(next_text)
            return

        user_states[user_id] = {
            "mode": "awaiting_level",
            "step": 0,
            "data": state["data"],
        }
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=LEVEL_KEYBOARD)
        return

    if state.get("mode") == "awaiting_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=LEVEL_KEYBOARD)
            return

        level = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π" if "–ù–∞—á–∏–Ω–∞—é—â–∏–π" in text else "–æ–ø—ã—Ç–Ω—ã–π"
        state["data"]["level"] = level

        finished_data = state["data"]
        user_states.pop(user_id, None)

        base_physical = user_data.get("physical_data", {}) or {}
        base_physical.update(finished_data)

        user_data["physical_data"] = base_physical
        user_data["physical_data_completed"] = True
        user_data.setdefault("history", [])
        save_user_data(user_id, user_data)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")

        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            response = await agent.get_response("")  # –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ => –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ –∞–Ω–∫–µ—Ç–µ
        except Exception:
            context.application.logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            await update.message.reply_text(
                "–°–µ–π—á–∞—Å –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=START_KEYBOARD,
            )
            return

        user_data["history"].append(("üßç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã", "ü§ñ " + response))
        save_user_data(user_id, user_data)

        await update.message.reply_text(response, reply_markup=START_KEYBOARD)
        return

    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    reply = await agent.get_response(text)

    user_data.setdefault("history", []).append(("üßç " + text, "ü§ñ " + reply))
    save_user_data(user_id, user_data)

    await update.message.reply_text(reply)
