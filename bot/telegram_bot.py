from __future__ import annotations

import os
import re
import time
import logging
from pathlib import Path
from typing import Optional, Dict, List

from telegram import Update, ReplyKeyboardMarkup, Chat
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from app.agent import FitnessAgent
from app.storage import (
    load_user_data, save_user_data, set_last_reply, get_last_reply, 
    set_user_goal, update_user_param, get_user_profile_text,
    validate_age, validate_height, validate_weight, validate_schedule
)

logger = logging.getLogger("bot.telegram_bot")

LAST_REPLIES: dict[str, str] = {}

user_states: Dict[str, dict] = {}

# Rate limiting: user_id -> –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
last_generation_time: Dict[str, float] = {}
GENERATION_COOLDOWN = 30  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏

GOAL_MAPPING = {
    "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å": "–ø–æ—Ö—É–¥–µ–Ω–∏–µ",
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
    "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
}

GOAL_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", "üßò –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

GENDER_CHOICES = ["üë© –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"]
GENDER_KEYBOARD = ReplyKeyboardMarkup(
    [GENDER_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

LEVEL_CHOICES = ["üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π", "üî• –û–ø—ã—Ç–Ω—ã–π"]
LEVEL_KEYBOARD = ReplyKeyboardMarkup(
    [LEVEL_CHOICES],
    resize_keyboard=True,
    one_time_keyboard=True,
)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É"],
        ["üÜï –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å"],
        ["üìã –ú–æ—è –∞–Ω–∫–µ—Ç–∞", "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
        ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", "üìë –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"],
        ["üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

VARIATIONS_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üí™ –ë–æ–ª—å—à–µ –±–∞–∑–æ–≤—ã—Ö", "üéØ –ë–æ–ª—å—à–µ –∏–∑–æ–ª—è—Ü–∏–∏"],
        ["üèãÔ∏è –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–∏–ª—É", "‚ö° –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"],
        ["üé≤ –°–ª—É—á–∞–π–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

MUSCLE_GROUPS_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["ü¶µ –£–ø–æ—Ä –Ω–∞ –Ω–æ–≥–∏", "üçë –£–ø–æ—Ä –Ω–∞ —è–≥–æ–¥–∏—Ü—ã"],
        ["üîô –£–ø–æ—Ä –Ω–∞ —Å–ø–∏–Ω—É", "üí™ –£–ø–æ—Ä –Ω–∞ –ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏"],
        ["üé≤ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

EDIT_PARAMS_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üë§ –ò–º—è", "üî¢ –í–æ–∑—Ä–∞—Å—Ç"],
        ["‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å", "üéØ –ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å"],
        ["üìà –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", "üèãÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"],
        ["üí™ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –º—ã—à—Ü—ã"],
        ["‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è / –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"],
        ["‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)


def _sanitize_for_tg(text: str) -> str:
    """–£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ HTML/markdown –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ #."""
    out = text or ""
    # —É–±—Ä–∞—Ç—å #/## –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫
    out = re.sub(r"^\s*#{1,6}\s*", "", out, flags=re.MULTILINE)
    # <br>, <p>
    out = re.sub(r"\s*<br\s*/?>\s*", "\n", out, flags=re.IGNORECASE)
    out = re.sub(r"</?p\s*/?>", "\n", out, flags=re.IGNORECASE)
    # —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (>2 –ø–æ–¥—Ä—è–¥ -> 2)
    out = re.sub(r"\n{3,}", "\n\n", out)
    return out.strip()

def _split_for_telegram(text: str, max_len: int = 3500) -> List[str]:
    """–î–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –¥–Ω–µ–π/–∞–±–∑–∞—Ü–µ–≤."""
    if len(text) <= max_len:
        return [text]

    parts: List[str] = []
    remaining = text
    while len(remaining) > max_len:
        # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä–∞–Ω–∏—Ü—É –¥–Ω—è
        cut = remaining.rfind("\n\n–î–µ–Ω—å ", 0, max_len)
        if cut < 0:
            cut = remaining.rfind("\n\n**–î–µ–Ω—å", 0, max_len)
        if cut < 0:
            cut = remaining.rfind("\n\n", 0, max_len)
        if cut < 0:
            cut = max_len
        parts.append(remaining[:cut].strip())
        remaining = remaining[cut:].strip()
    if remaining:
        parts.append(remaining)
    return parts

async def _safe_send(chat: Chat, text: str, use_markdown: bool = True):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∫—É—Å–∫–∏ + fallback –±–µ–∑ Markdown –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    text = text.strip()
    for chunk in _split_for_telegram(text):
        try:
            if use_markdown:
                await chat.send_message(
                    chunk,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True,
                )
            else:
                await chat.send_message(chunk, disable_web_page_preview=True)
        except Exception as e:
            logger.error("Markdown failed, fallback to plain. Err: %s", e)
            await chat.send_message(chunk, disable_web_page_preview=True)

async def _send_main_menu(update: Update):
    await update.effective_chat.send_message(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é ‚¨áÔ∏è",
        reply_markup=MAIN_KEYBOARD,
    )

async def _save_last_to_file(update: Update, user_id: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã/–æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª .txt –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
    text = LAST_REPLIES.get(user_id) or get_last_reply(user_id) or ""
    if not text.strip():
        await update.effective_chat.send_message(
            "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–≥—Ä–∞–º–º—É (–∫–Ω–æ–ø–∫–æ–π ¬´üìÑ –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª)."
        )
        return
    ts = int(time.time())
    fname = f"program_{user_id}_{ts}.txt"
    out_path = Path("data/users") / fname
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(text, encoding="utf-8")
    with open(out_path, "rb") as fh:
        await update.effective_chat.send_document(
            fh, filename=fname, caption="–í–æ—Ç —Ñ–∞–π–ª —Å —Ç–≤–æ–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º üëåüèº"
        )

async def _show_saved_programs(update: Update, user_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_dir = Path("data/users")
    pattern = f"program_{user_id}_*.txt"
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    files = list(user_dir.glob(pattern))
    
    if not files:
        await update.effective_chat.send_message(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É ¬´üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç¬ª –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
    files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
    recent_files = files[:10]
    
    await update.effective_chat.send_message(
        f"üìë –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(files)}\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_files)}..."
    )
    
    for file_path in recent_files:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        try:
            timestamp = int(file_path.stem.split('_')[-1])
            date_str = time.strftime("%d.%m.%Y %H:%M", time.localtime(timestamp))
            caption = f"üìé –ó–∞–ø—Ä–æ—Å –æ—Ç {date_str}"
        except (ValueError, IndexError):
            caption = f"üìé {file_path.name}"
        
        with open(file_path, "rb") as fh:
            await update.effective_chat.send_document(
                fh, filename=file_path.name, caption=caption
            )

def _normalize_name(raw: str) -> str:
    name = (raw or "").strip()
    return name[:80] if len(name) > 80 else name

def _normalize_gender(text: str) -> Optional[str]:
    t = (text or "").lower()
    if "–∂–µ–Ω" in t or "üë©" in t:
        return "–∂–µ–Ω—Å–∫–∏–π"
    if "–º—É–∂" in t or "üë®" in t:
        return "–º—É–∂—Å–∫–æ–π"
    return None

def _parse_goal(text: str) -> Optional[str]:
    """–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–ª—å –∏–∑ –∫–Ω–æ–ø–∫–∏/—Ç–µ–∫—Å—Ç–∞."""
    t = (text or "").lower()
    if any(w in t for w in ("–ø–æ—Ö—É–¥", "—Å–±—Ä–æ—Å", "–∂–∏—Ä")):
        return "–ø–æ—Ö—É–¥–µ–Ω–∏–µ"
    if any(w in t for w in ("–Ω–∞–±—Ä–∞", "–º–∞—Å", "–º—ã—à—Ü")):
        return "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã"
    if any(w in t for w in ("–ø–æ–¥–¥–µ—Ä–∂", "—Ñ–æ—Ä–º–∞", "—Ç–æ–Ω–∏", "—É–∫—Ä–µ–ø")):
        return "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()

    # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_user_data(user_id)
    phys = data.get("physical_data") or {}
    name = phys.get("name")
    completed = bool(data.get("physical_data_completed"))
    state = user_states.get(user_id) or {"mode": None, "step": 0, "data": {}}
    
    logger.debug(f"handle_message - user_id: {user_id}, text: {text[:50]}, state.mode: {state.get('mode')}, completed: {completed}")


    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª":
        logger.info(f"User {user_id} ({name}) saving last reply to file")
        await _save_last_to_file(update, user_id)
        return

    if text == "üìë –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤":
        logger.info(f"User {user_id} ({name}) viewing saved programs history")
        await _show_saved_programs(update, user_id)
        return

    if text == "üìã –ú–æ—è –∞–Ω–∫–µ—Ç–∞":
        if not completed:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É ¬´üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.",
                reply_markup=MAIN_KEYBOARD,
            )
            return
        logger.info(f"User {user_id} ({name}) viewing profile")
        profile_text = get_user_profile_text(user_id)
        await update.message.reply_text(profile_text, parse_mode=ParseMode.MARKDOWN)
        return

    if text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
        if not completed:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É ¬´üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.",
                reply_markup=MAIN_KEYBOARD,
            )
            return
        logger.info(f"User {user_id} ({name}) opening edit parameters menu")
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚¨áÔ∏è",
            reply_markup=EDIT_PARAMS_KEYBOARD,
        )
        return

    if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        user_states.pop(user_id, None)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=MAIN_KEYBOARD)
        return

    if text == "üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞
        if not completed:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É ¬´üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ¬ª –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.",
                reply_markup=MAIN_KEYBOARD,
            )
            return
            
        logger.info(f"User {user_id} ({name}) changing goal from {phys.get('target')}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
        user_states[user_id] = {"mode": "changing_goal", "step": 0, "data": {}}
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        current_goal = phys.get("target", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {current_goal}\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    if text == "üÜï –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∞–∫—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –≥—Ä—É–ø–ø—É –º—ã—à—Ü ‚¨áÔ∏è",
            reply_markup=MUSCLE_GROUPS_KEYBOARD
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    # –í–ê–ñ–ù–û: —ç—Ç–æ—Ç –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üÜï –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", –ù–ï –¥–ª—è survey!
    muscle_groups_map = {
        "ü¶µ –£–ø–æ—Ä –Ω–∞ –Ω–æ–≥–∏": "–Ω–æ–≥–∏",
        "üçë –£–ø–æ—Ä –Ω–∞ —è–≥–æ–¥–∏—Ü—ã": "—è–≥–æ–¥–∏—Ü—ã",
        "üîô –£–ø–æ—Ä –Ω–∞ —Å–ø–∏–Ω—É": "—Å–ø–∏–Ω–∞",
        "üí™ –£–ø–æ—Ä –Ω–∞ –ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏": "–ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏",
        "üé≤ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞": "–≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ",
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —Ä–µ–∂–∏–º–µ awaiting_muscle_group
    if text in muscle_groups_map and state.get("mode") != "awaiting_muscle_group":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = {
            "mode": "choosing_variation", 
            "step": 0, 
            "data": {"muscle_group": muscle_groups_map[text]}
        }
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ {muscle_groups_map[text]}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=VARIATIONS_KEYBOARD
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞—Ü–∏–π –ø—Ä–æ–≥—Ä–∞–º–º (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü)
    variation_map = {
        "üí™ –ë–æ–ª—å—à–µ –±–∞–∑–æ–≤—ã—Ö": "–°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –±–∞–∑–æ–≤—ã–µ –º–Ω–æ–≥–æ—Å—É—Å—Ç–∞–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, —Å—Ç–∞–Ω–æ–≤–∞—è, –∂–∏–º—ã, –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è).",
        "üéØ –ë–æ–ª—å—à–µ –∏–∑–æ–ª—è—Ü–∏–∏": "–î–æ–±–∞–≤—å –±–æ–ª—å—à–µ –∏–∑–æ–ª–∏—Ä—É—é—â–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º—ã—à–µ—á–Ω—ã—Ö –≥—Ä—É–ø–ø.",
        "üèãÔ∏è –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–∏–ª—É": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∏–ª—ã: –º–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (4-6), –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞, —Ç—è–∂–µ–ª—ã–µ –≤–µ—Å–∞.",
        "‚ö° –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: –±–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (15-20), –º–µ–Ω—å—à–µ –æ—Ç–¥—ã—Ö–∞, —É–º–µ—Ä–µ–Ω–Ω—ã–µ –≤–µ—Å–∞.",
        "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è": "–°–¥–µ–ª–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
    }
    
    if text in variation_map:
        # Rate limiting check
        current_time = time.time()
        last_time = last_generation_time.get(user_id, 0)
        time_since_last = current_time - last_time
        
        if time_since_last < GENERATION_COOLDOWN:
            wait_time = int(GENERATION_COOLDOWN - time_since_last)
            await update.message.reply_text(
                f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.\n\n"
                "–≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ üòä"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        muscle_group = state.get("data", {}).get("muscle_group", "")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"User {user_id} ({name}) requested program variation: {text}, muscle_group: {muscle_group}")
        
        progress_msg = await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É...")
        start_time = time.time()
        
        try:
            agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
            variation = variation_map[text]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≥—Ä—É–ø–ø—É –º—ã—à—Ü, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
            if muscle_group:
                variation += f" –°–¥–µ–ª–∞–π –û–°–û–ë–´–ô –ê–ö–¶–ï–ù–¢ –Ω–∞ {muscle_group}. –í–∫–ª—é—á–∏ –±–æ–ª—å—à–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü."
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            plan = await agent.get_program(variation)
            
            generation_time = time.time() - start_time
            logger.info(f"Program generated for user {user_id} in {generation_time:.2f}s")
            
            await progress_msg.edit_text("‚ú® –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            last_generation_time[user_id] = current_time
            
        except Exception as e:
            logger.exception(f"Error generating program for user {user_id}")
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            error_msg = "‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.\n\n"
            
            if "timeout" in str(e).lower():
                error_msg += "‚è±Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
            elif "connection" in str(e).lower():
                error_msg += "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            elif "unauthorized" in str(e).lower() or "403" in str(e):
                error_msg += "üîí –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            else:
                error_msg += f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)[:100]}"
            
            await progress_msg.edit_text(error_msg)
            return
        
        plan = _sanitize_for_tg(plan)
        LAST_REPLIES[user_id] = plan
        set_last_reply(user_id, plan)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        user_states.pop(user_id, None)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        logger.info(f"Program sent to user {user_id}, length: {len(plan)} chars")
        
        await _safe_send(update.effective_chat, plan, use_markdown=True)
        await _send_main_menu(update)
        return

    if text == "üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        logger.info(f"User {user_id} ({name}) restarting registration")
        
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å: –∏–º—è, –∞–Ω–∫–µ—Ç–∞, –∏—Å—Ç–æ—Ä–∏—è, –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞/–æ—Ç–≤–µ—Ç
        data["physical_data"] = {}                 # <- –∏–º—è —Ç–æ–∂–µ –æ—á–∏—â–∞–µ–º
        data["physical_data_completed"] = False
        data["history"] = []
        data["last_program"] = None
        data["last_reply"] = None
        save_user_data(user_id, data)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º runtime-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ –∏–º—è
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ üìù –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    if not completed and state.get("mode") is None:
        if not name:
            user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
            await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            return
        # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ state["data"]
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {"name": name}}
        await update.message.reply_text(
            f"{name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-—Ç—Ä–µ–Ω–µ—Ä—É":
        user_states[user_id] = {"mode": "qa", "step": 0, "data": {}}
        await update.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º/–ø–∏—Ç–∞–Ω–∏—é ‚úçüèº")
        logger.info(f"User {user_id} ({name}) entered Q&A mode")
        return

    if state.get("mode") == "qa":
        logger.info(f"User {user_id} ({name}) asked: {text[:100]}")
        
        progress_msg = await update.message.reply_text("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        start_time = time.time()
        
        try:
            agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
            answer = await agent.get_answer(text)
            
            answer_time = time.time() - start_time
            logger.info(f"Answer generated for user {user_id} in {answer_time:.2f}s")
            
            await progress_msg.delete()
        except Exception as e:
            logger.exception(f"Error generating answer for user {user_id}")
            
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.\n\n"
            
            if "timeout" in str(e).lower():
                error_msg += "‚è±Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            elif "connection" in str(e).lower():
                error_msg += "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            else:
                error_msg += "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑."
            
            await progress_msg.edit_text(error_msg)
            return
        
        answer = _sanitize_for_tg(answer)
        LAST_REPLIES[user_id] = answer
        set_last_reply(user_id, answer)
        
        logger.info(f"Answer sent to user {user_id}, length: {len(answer)} chars")
        
        await _safe_send(update.effective_chat, answer, use_markdown=True)
        return

    # –ò–º—è
    if state.get("mode") == "awaiting_name":
        if not text:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è.")
            return
        normalized_name = _normalize_name(text)
        phys["name"] = normalized_name
        data["physical_data"] = phys
        save_user_data(user_id, data)
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ state["data"], —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ–ø–∞–ª–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        user_states[user_id] = {"mode": "awaiting_goal", "step": 0, "data": {"name": normalized_name}}
        await update.message.reply_text(
            f"{normalized_name}, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚¨áÔ∏è",
            reply_markup=GOAL_KEYBOARD,
        )
        return

    # –¶–µ–ª—å
    if state.get("mode") == "awaiting_goal":
        if text in GOAL_MAPPING:
            # —Ü–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ –∫ –ø–æ–ª—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
            user_states[user_id] = {
                "mode": "awaiting_gender", 
                "step": 0, 
                "data": {**state["data"], "target": GOAL_MAPPING[text]}
            }
            await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=GENDER_KEYBOARD)
            return

        # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º –ø—Ä–æ—Å—å–±—É –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GOAL_KEYBOARD)
        return

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if text == "üë§ –ò–º—è":
        user_states[user_id] = {"mode": "editing_name", "step": 0, "data": {}}
        current_name = phys.get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {current_name}\n\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è:"
        )
        return

    if text == "üî¢ –í–æ–∑—Ä–∞—Å—Ç":
        user_states[user_id] = {"mode": "editing_age", "step": 0, "data": {}}
        current_age = phys.get("age", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {current_age} –ª–µ—Ç\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç):"
        )
        return

    if text == "‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å":
        user_states[user_id] = {"mode": "editing_weight", "step": 0, "data": {}}
        current_weight = phys.get("weight", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight} –∫–≥\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75 –∏–ª–∏ 75.5):"
        )
        return

    if text == "üéØ –ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å":
        user_states[user_id] = {"mode": "editing_goal_weight", "step": 0, "data": {}}
        current_goal = phys.get("goal", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        await update.message.reply_text(
            f"–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å: {current_goal} –∫–≥\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70 –∏–ª–∏ 70.5):"
        )
        return

    if text == "üìà –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫":
        user_states[user_id] = {"mode": "editing_schedule", "step": 0, "data": {}}
        current_schedule = phys.get("schedule", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {current_schedule} —Ä–∞–∑/–Ω–µ–¥–µ–ª—é\n\n–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é —Å–º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å –∑–∞–ª (1-7)?"
        )
        return

    if text == "‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è / –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è":
        user_states[user_id] = {"mode": "editing_restrictions", "step": 0, "data": {}}
        current_restrictions = phys.get("restrictions", "–Ω–µ—Ç")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {current_restrictions}\n\n–û–ø–∏—à–∏ –Ω–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):"
        )
        return

    if text == "üèãÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏":
        user_states[user_id] = {"mode": "editing_level", "step": 0, "data": {}}
        current_level = phys.get("level", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=LEVEL_KEYBOARD,
        )
        return

    if text == "üí™ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –º—ã—à—Ü—ã":
        user_states[user_id] = {"mode": "editing_muscle_group", "step": 0, "data": {}}
        muscle_group_display = {
            "–Ω–æ–≥–∏": "ü¶µ –ù–æ–≥–∏",
            "—è–≥–æ–¥–∏—Ü—ã": "üçë –Ø–≥–æ–¥–∏—Ü—ã",
            "—Å–ø–∏–Ω–∞": "üîô –°–ø–∏–Ω–∞",
            "–ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏": "üí™ –ü–ª–µ—á–∏ –∏ —Ä—É–∫–∏",
            "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ": "üé≤ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ"
        }
        current_group = phys.get("preferred_muscle_group", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        display_group = muscle_group_display.get(current_group, current_group)
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –∞–∫—Ü–µ–Ω—Ç: {display_group}\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:",
            reply_markup=MUSCLE_GROUPS_KEYBOARD,
        )
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ (–ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã)
    if state.get("mode") == "changing_goal":
        if text in GOAL_MAPPING:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            set_user_goal(user_id, GOAL_MAPPING[text])
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states.pop(user_id, None)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {text}\n\n–¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±—É–¥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –Ω–æ–≤—É—é —Ü–µ–ª—å.",
                reply_markup=MAIN_KEYBOARD,
            )
            return
        
        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:", reply_markup=GOAL_KEYBOARD)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    if state.get("mode") == "editing_name":
        new_name = _normalize_name(text)
        if not new_name:
            await update.message.reply_text("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        update_user_param(user_id, "name", new_name)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if state.get("mode") == "editing_age":
        valid, value, error = validate_age(text)
        if not valid:
            await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        update_user_param(user_id, "age", value)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {value} –ª–µ—Ç",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞
    if state.get("mode") == "editing_weight":
        valid, value, error = validate_weight(text)
        if not valid:
            await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        update_user_param(user_id, "weight", value)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –¢–µ–∫—É—â–∏–π –≤–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {value} –∫–≥",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤–µ—Å–∞
    if state.get("mode") == "editing_goal_weight":
        valid, value, error = validate_weight(text)
        if not valid:
            await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        update_user_param(user_id, "goal", value)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {value} –∫–≥",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã
    if state.get("mode") == "editing_schedule":
        valid, value, error = validate_schedule(text)
        if not valid:
            await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        update_user_param(user_id, "schedule", value)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value} —Ä–∞–∑/–Ω–µ–¥–µ–ª—é",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if state.get("mode") == "editing_restrictions":
        restrictions = text if text.lower() not in ["–Ω–µ—Ç", "no", "-"] else None
        update_user_param(user_id, "restrictions", restrictions)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è / –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {restrictions or '–Ω–µ—Ç'}",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if state.get("mode") == "editing_level":
        if text not in LEVEL_CHOICES:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=LEVEL_KEYBOARD,
            )
            return
        level = "–æ–ø—ã—Ç–Ω—ã–π" if ("–û–ø—ã—Ç" in text or "üî•" in text) else "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"
        update_user_param(user_id, "level", level)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {level}",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ü–µ–Ω—Ç–∞ –Ω–∞ –º—ã—à–µ—á–Ω—É—é –≥—Ä—É–ø–ø—É
    if state.get("mode") == "editing_muscle_group":
        muscle_groups_map = {
            "ü¶µ –£–ø–æ—Ä –Ω–∞ –Ω–æ–≥–∏": "–Ω–æ–≥–∏",
            "üçë –£–ø–æ—Ä –Ω–∞ —è–≥–æ–¥–∏—Ü—ã": "—è–≥–æ–¥–∏—Ü—ã",
            "üîô –£–ø–æ—Ä –Ω–∞ —Å–ø–∏–Ω—É": "—Å–ø–∏–Ω–∞",
            "üí™ –£–ø–æ—Ä –Ω–∞ –ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏": "–ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏",
            "üé≤ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞": "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ",
        }
        
        if text not in muscle_groups_map:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=MUSCLE_GROUPS_KEYBOARD,
            )
            return
        
        muscle_group = muscle_groups_map[text]
        update_user_param(user_id, "preferred_muscle_group", muscle_group)
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –º—ã—à—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {text}",
            reply_markup=MAIN_KEYBOARD,
        )
        return

    # –ü–æ–ª
    if state.get("mode") == "awaiting_gender":
        g = _normalize_gender(text)
        if not g:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=GENDER_KEYBOARD,
            )
            return
        st = {"mode": "survey", "step": 2, "data": {**state["data"], "gender": g}}
        user_states[user_id] = st
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
    questions = [
        ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
        ("height", "–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"),
        ("weight", "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("goal", "–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"),
        ("restrictions", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?"),
        ("schedule", "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª?"),
    ]

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ä–æ—Å (–≤–æ–∑—Ä–∞—Å—Ç ‚Üí ... ‚Üí —á–∞—Å—Ç–æ—Ç–∞)
    if state.get("mode") == "survey":
        logger.debug(f"Survey mode - step={state['step']}, current data: {state.get('data', {})}, user text: {text[:50] if text else 'empty'}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤ –æ–ø—Ä–æ—Å)
        if state["step"] > 1:
            prev_key = questions[state["step"] - 2][0]
            logger.debug(f"Validating prev_key={prev_key}, text={text}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
            if prev_key == "age":
                valid, value, error = validate_age(text)
                if not valid:
                    await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
                    return
                state["data"][prev_key] = value
            elif prev_key == "height":
                valid, value, error = validate_height(text)
                if not valid:
                    await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
                    return
                state["data"][prev_key] = value
            elif prev_key == "weight":
                valid, value, error = validate_weight(text)
                if not valid:
                    await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
                    return
                state["data"][prev_key] = value
            elif prev_key == "goal":
                valid, value, error = validate_weight(text)
                if not valid:
                    await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
                    return
                state["data"][prev_key] = value
            elif prev_key == "restrictions":
                # –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
                restrictions = text if text.lower() not in ["–Ω–µ—Ç", "no", "-"] else None
                state["data"][prev_key] = restrictions
            elif prev_key == "schedule":
                valid, value, error = validate_schedule(text)
                if not valid:
                    await update.message.reply_text(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
                    return
                state["data"][prev_key] = value
            else:
                state["data"][prev_key] = text
            
            logger.debug(f"After validation - state[data]: {state['data']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã?
        if state["step"] <= len(questions):
            idx = state["step"] - 1
            _, qtext = questions[idx]
            # –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π state –æ–±—Ä–∞—Ç–Ω–æ –≤ user_states
            user_states[user_id] = {"mode": "survey", "step": state["step"] + 1, "data": state["data"]}
            logger.debug(f"Moving to next question, saved state: {user_states[user_id]}")
            await update.message.reply_text(qtext)
            return
        
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        logger.debug(f"Survey completed - state[data]: {state['data']}")
        user_states[user_id] = {"mode": "awaiting_level", "step": 0, "data": state["data"]}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=LEVEL_KEYBOARD)
        return

    # –£—Ä–æ–≤–µ–Ω—å
    if state.get("mode") == "awaiting_level":
        logger.debug(f"awaiting_level triggered - text: {text}, state: {state}")
        if text not in LEVEL_CHOICES:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=LEVEL_KEYBOARD,
            )
            return
        level = "–æ–ø—ã—Ç–Ω—ã–π" if ("–û–ø—ã—Ç" in text or "üî•" in text) else "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"
        logger.debug(f"Level selected: {level}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º—ã—à–µ—á–Ω–æ–π –≥—Ä—É–ø–ø—ã
        user_states[user_id] = {
            "mode": "awaiting_muscle_group", 
            "step": 0, 
            "data": {**state["data"], "level": level}
        }
        
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö ‚¨áÔ∏è",
            reply_markup=MUSCLE_GROUPS_KEYBOARD
        )
        return
    
    # –í—ã–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –≥—Ä—É–ø–ø—ã (–ø–æ—Å–ª–µ —É—Ä–æ–≤–Ω—è, –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã)
    if state.get("mode") == "awaiting_muscle_group":
        muscle_groups_map = {
            "ü¶µ –£–ø–æ—Ä –Ω–∞ –Ω–æ–≥–∏": "–Ω–æ–≥–∏",
            "üçë –£–ø–æ—Ä –Ω–∞ —è–≥–æ–¥–∏—Ü—ã": "—è–≥–æ–¥–∏—Ü—ã",
            "üîô –£–ø–æ—Ä –Ω–∞ —Å–ø–∏–Ω—É": "—Å–ø–∏–Ω–∞",
            "üí™ –£–ø–æ—Ä –Ω–∞ –ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏": "–ø–ª–µ—á–∏ –∏ —Ä—É–∫–∏",
            "üé≤ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞": "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ",
        }
        
        if text not in muscle_groups_map:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                reply_markup=MUSCLE_GROUPS_KEYBOARD,
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü
        muscle_group = muscle_groups_map[text]
        finished = {**state["data"], "preferred_muscle_group": muscle_group}
        user_states.pop(user_id, None)

        logger.debug(f"Before save - state[data]: {state['data']}")
        logger.debug(f"Before save - finished: {finished}")

        base = data.get("physical_data") or {}
        base.update(finished)
        data["physical_data"] = base
        data["physical_data_completed"] = True
        save_user_data(user_id, data)

        logger.info(f"User {user_id} ({base.get('name')}) completed registration with muscle group: {muscle_group}")
        logger.debug(f"Saved physical_data: {base}")

        progress_msg = await update.message.reply_text("‚è≥ –°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É‚Ä¶")
        start_time = time.time()

        agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
        try:
            plan = await agent.get_program("")
            
            generation_time = time.time() - start_time
            logger.info(f"First program generated for user {user_id} in {generation_time:.2f}s")
            
            await progress_msg.edit_text("‚ú® –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞!")
        except Exception as e:
            logger.exception(f"Error generating first program for user {user_id}")
            
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.\n\n"
            
            if "timeout" in str(e).lower():
                error_msg += "‚è±Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É ¬´üÜï –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."
            elif "connection" in str(e).lower():
                error_msg += "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∫–Ω–æ–ø–∫–æ–π ¬´üÜï –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª."
            else:
                error_msg += "–ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üÜï –î—Ä—É–≥–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
            
            await progress_msg.edit_text(error_msg)
            await _send_main_menu(update)
            return

        plan = _sanitize_for_tg(plan)
        LAST_REPLIES[user_id] = plan
        set_last_reply(user_id, plan)
        
        logger.info(f"First program sent to user {user_id}, length: {len(plan)} chars")
        
        await _safe_send(update.effective_chat, plan, use_markdown=True)
        await _send_main_menu(update)
        return

    if not completed:
        user_states[user_id] = {"mode": "awaiting_name", "step": 0, "data": {}}
        await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        return

    agent = FitnessAgent(token=os.getenv("GIGACHAT_TOKEN"), user_id=user_id)
    try:
        plan = await agent.get_program(text)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏)")
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    plan = _sanitize_for_tg(plan)
    LAST_REPLIES[user_id] = plan
    set_last_reply(user_id, plan)
    await _safe_send(update.effective_chat, plan, use_markdown=True)
    await _send_main_menu(update)
